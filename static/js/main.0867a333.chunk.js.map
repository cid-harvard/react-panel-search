{"version":3,"sources":["../../src/components/StandardSearch.tsx","../../src/components/Root.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["SearchContainer","styled","SearchIcon","SearchBar","magnifyingGlassSize","DropDownIcon","ClearButton","StandardSearch","props","placeholder","setSearchQuery","initialQuery","type","onClear","hasSelection","handleKeyDown","onFocus","neverEmpty","isOpen","setIsOpen","previousPlaceholder","usePrevious","searchEl","useRef","clearEl","dropdownEl","onChange","debounce","useEffect","node","className","dangerouslySetInnerHTML","__html","ref","autoComplete","onKeyDown","style","display","marginRight","undefined","onClick","transform","e","document","chevronSVG","Container","SearchResults","TitleOuter","BreadCrumbOuter","Title","NavButton","NextButton","TraverseOnlyButton","PanelItem","ButtonBase","PanelButton","SearchButton","Direction","levels","onSelect","selectedValue","topLevelTitle","disallowSelectionLevels","onTraverseLevel","onHover","defaultPlaceholderText","showCount","resultsIdentation","initialSelectedValue","i","l","previousSelectedValue","useState","level","parent","selected","searchQuery","highlightedIndex","state","setState","updateState","newState","selectDatum","value","rootRef","preventClickFromPropagating","closeDropdown","current","el","resultsRef","liElms","Array","li","index","Math","highlightedTop","highlightedBottom","containerScrollTop","onMouseLeave","filteredElms","renderedIds","data","sortBy","datum","childList","childElms","getChildren","elms","child","depth","onMouseEnter","resultElm","targetIndex","paddingLeft","paddingRight","key","id","listOutput","listItems","d","onContinue","ArrowButton","continueButton","count","parentDatum","titleText","React","breadCrumb","searchResults","zIndex","val","newSelected","highlightedElm","focusedInput","sortedLevels","Root","div","PageTitle","h1","button","rawData","JSON","parse","App","setSelectedValue","map","naics_id","title","parent_id","selectedText","clearButton","floor","random","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0867a333.chunk.js","sourcesContent":["import { debounce } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport usePrevious from 'react-use-previous-hook';\nimport raw from 'raw.macro';\n\nconst magnifyingGlassSVG = raw('../assets/magnifying-glass.svg');\nconst chevronSVG = raw('../assets/chevron.svg');\n\nconst SearchContainer = styled.label`\n  position: relative;\n  display: flex;\n`;\n\nconst magnifyingGlassSize = 1.5; // in rem\nconst magnifyingGlassSpacing = 0.5; // in rem\n\nconst SearchIcon = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto ${magnifyingGlassSpacing}rem;\n  width: ${magnifyingGlassSize}rem;\n  cursor: pointer;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: gray;\n    }\n  }\n`;\n\nconst SearchBar = styled.input<{$hasSelection: boolean}>`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0.5rem 0.5rem 0.5rem ${magnifyingGlassSize + (magnifyingGlassSpacing * 2)}rem;\n  box-sizing: border-box;\n  border: solid 1px #dfdfdf;\n  font-size: 1.2rem;\n  font-weight: 300;\n\n  ${({$hasSelection}) => $hasSelection ? (\n    `&::placeholder {\n      color: rgb(0, 0, 0);\n    }`\n  ) : ''}\n\n  &:focus {\n    &::placeholder {\n      color: rgb(255, 255, 255);\n    }\n  }\n`;\n\nconst DropDownIcon = styled.div`\n  position: absolute;\n  top: 3px;\n  bottom: 3px;\n  right: 2px;\n  padding: 0 0.4rem;\n  background-color: #fff;\n  border: none;\n  width: ${magnifyingGlassSize}rem;\n  cursor: pointer;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    polyline {\n      stroke: gray;\n      stroke-width: 0.6px;\n    }\n  }\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  top: 2px;\n  bottom: 2px;\n  right: 2px;\n  line-height: 0;\n  font-size: 1.2rem;\n  padding: 0.4rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #696969;\n  background-color: #fff;\n  border: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n\n  &:hover {\n    color: #908d8d;\n    cursor: pointer;\n  }\n`;\n\ninterface Props {\n  placeholder: string;\n  setSearchQuery: (value: string) => void;\n  initialQuery: string;\n  onClear: () => void;\n  hasSelection: boolean;\n  handleKeyDown: (event: React.KeyboardEvent) => void;\n  onFocus: () => void;\n  neverEmpty: boolean;\n  type?: string;\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n}\n\nconst StandardSearch = (props: Props) => {\n  const {\n    placeholder, setSearchQuery, initialQuery, type, onClear, hasSelection, handleKeyDown, onFocus,\n    neverEmpty,\n    isOpen, setIsOpen,\n  } = props;\n\n  const previousPlaceholder = usePrevious(placeholder);\n\n  const searchEl = useRef<HTMLInputElement | null>(null);\n  const clearEl = useRef<HTMLButtonElement | null>(null);\n  const dropdownEl = useRef<HTMLDivElement | null>(null);\n\n  const onChange = debounce(() => {\n    if (searchEl !== null && searchEl.current !== null) {\n      setSearchQuery(searchEl.current.value);\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = !neverEmpty && (searchEl.current.value.length || hasSelection)\n          ? 'block'\n          : 'none';\n      }\n      if (dropdownEl && dropdownEl.current) {\n        dropdownEl.current.style.display = !neverEmpty && (searchEl.current.value.length || hasSelection)\n          ? 'none'\n          : 'block';\n      }\n    }\n  }, 400);\n\n  const clearSearch = () => {\n    if (searchEl !== null && searchEl.current !== null) {\n      searchEl.current.value = '';\n      searchEl.current.focus();\n      setSearchQuery(searchEl.current.value);\n      onClear();\n    }\n    if (clearEl && clearEl.current && !neverEmpty) {\n      clearEl.current.style.display = 'none';\n    }\n    if (dropdownEl && dropdownEl.current) {\n      dropdownEl.current.style.display = 'block';\n    }\n  };\n\n  useEffect(() => {\n    const node = searchEl.current;\n    if (node) {\n      if (!node.value) {\n        node.value = initialQuery;\n      }\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = !neverEmpty && (node.value.length || hasSelection) ? 'block' : 'none';\n      }\n      if (dropdownEl && dropdownEl.current) {\n        dropdownEl.current.style.display = !neverEmpty && (node.value.length || hasSelection) ? 'none' : 'block';\n      }\n      if (node.value && hasSelection && previousPlaceholder !== placeholder) {\n        node.value = '';\n      }\n    }\n  }, [searchEl, initialQuery, hasSelection, placeholder, previousPlaceholder]);\n\n  const closeDropdown = (e: React.MouseEvent) => {\n    if (isOpen) {\n      e.preventDefault();\n      e.stopPropagation();\n      (document.activeElement as HTMLElement).blur();\n      setIsOpen(false)\n    }\n  }\n\n  return (\n    <SearchContainer\n      className={'react-panel-search-search-bar-container'}\n    >\n      <SearchIcon\n        className={'react-panel-search-search-bar-search-icon'}\n        dangerouslySetInnerHTML={{__html: magnifyingGlassSVG}}\n      />\n      <SearchBar\n        className={'react-panel-search-search-bar-input'}\n        ref={searchEl}\n        type={type ? type : 'text'}\n        placeholder={placeholder}\n        onChange={onChange}\n        autoComplete={'off'}\n        $hasSelection={hasSelection}\n        onKeyDown={handleKeyDown}\n        onFocus={onFocus}\n      />\n      <ClearButton\n        className={'react-panel-search-search-bar-clear-button'}\n        ref={clearEl}\n        style={{\n          display: 'none',\n          marginRight: type === 'number' ? '1rem' : undefined,\n        }}\n        onClick={clearSearch}\n      >\n        ×\n      </ClearButton>\n      <DropDownIcon\n        ref={dropdownEl}\n        className={'react-panel-search-search-bar-dropdown-arrow'}\n        style={{\n          display: 'block',\n          transform: isOpen ? 'rotate(180deg)' : undefined,\n        }}\n        dangerouslySetInnerHTML={{__html: chevronSVG}}\n        onClick={closeDropdown}\n      />\n    </SearchContainer>\n  );\n};\n\nexport default StandardSearch;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {Level, Datum} from '../'\nimport StandardSearch from './StandardSearch';\nimport sortBy from 'lodash/sortBy';\nimport usePrevious from 'react-use-previous-hook';\nimport styled from 'styled-components/macro';\nimport raw from 'raw.macro';\n\nconst chevronSVG = raw('../assets/chevron.svg');\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  color: #333;\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li {\n    li {\n      button:before {\n        content: '↳';\n        margin-right: 0.5rem;\n      }\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: #f3f3f3;\n  }\n`;\n\nconst SearchBar = styled.div`\n  position: relative;\n`;\n\nconst SearchResults = styled.div`\n  position: absolute;\n  width: 100%;\n  box-sizing: border-box;\n  max-height: 300px;\n  overflow: auto;\n  background-color: #fff;\n\n  &:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: #fff;\n    }\n  }\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n`;\n\nconst TitleOuter = styled.div`\n  font-weight: 600;\n  padding: 0.25rem 1.75rem 0.6rem;\n  text-transform: uppercase;\n  color: #444;\n  font-size: 0.85rem;\n`;\n\nconst BreadCrumbOuter = styled(TitleOuter)`\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst Title = styled.div`\n  display: grid;\n  grid-column-gap: 0.5rem;\n  grid-template-columns: auto 1fr;\n  padding: 0.35rem 0;\n  border-bottom: solid 1px gray;\n`;\n\nconst NavButton = styled.button`\n  border: none;\n  outline: none;\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 1.4rem;\n  padding: 0.25rem;\n  background-color: transparent;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    transform: rotate(90deg);\n\n    polyline {\n      stroke: gray;\n      stroke-width: 0.75px;\n    }\n  }\n`;\n\nconst NextButton = styled(NavButton)`\n  grid-row: 1;\n  grid-column: 2;\n  position: relative;\n  padding: 0 0.25rem;\n  height: 1.5rem;\n  background-color: #fff;\n  margin: auto 1.75rem auto 0.75rem;\n\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n\n  svg {\n    transform: rotate(-90deg);\n  }\n`;\n\nconst TraverseOnlyButton = styled(NextButton)`\n  background-color: transparent;\n  pointer-events: none;\n`;\n\nconst PanelItem = styled.li`\n  display: grid;\n  grid-template-columns: 1fr auto;\n`;\n\nconst ButtonBase = styled.button`\n  padding: 0.75rem 4rem 0.75rem 2rem;\n  font-size: 0.8rem;\n  background-color: #fff;\n  border: none;\n  outline: none;\n  display: block;\n  width: 100%;\n  text-align: left;\n  box-sizing: border-box;\n\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst PanelButton = styled(ButtonBase)`\n  grid-row: 1;\n  grid-column: 1 / 3;\n`;\n\nconst SearchButton = styled(ButtonBase)`\n  padding: 0.6rem 0.75rem\n`;\n\nexport enum Direction {\n  asc = 'asc',\n  desc = 'desc',\n}\n\ninterface Props {\n  levels: Level[];\n  onSelect: undefined | ((value: Datum | null) => void);\n  onTraverseLevel: undefined | ((value: Datum, direction: Direction) => void);\n  onHover: undefined | ((value: Datum | null) => void);\n  selectedValue: Datum | null;\n  topLevelTitle: string | undefined;\n  disallowSelectionLevels: undefined | (Level['level'][]);\n  defaultPlaceholderText: string;\n  showCount: boolean;\n  resultsIdentation: number;\n  neverEmpty: boolean;\n}\n\ninterface State {\n  level: Datum['level'];\n  parent: Datum['parent_id'];\n  selected: Datum | null;\n  searchQuery: string;\n  highlightedIndex: number;\n  isOpen: boolean;\n}\n\nexport default (props: Props) => {\n  const {\n    levels, onSelect, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel, onHover, defaultPlaceholderText, showCount, resultsIdentation,\n    neverEmpty,\n  } = props;\n\n  let initialSelectedValue: Datum | null = selectedValue;\n  if (neverEmpty) {\n    if (levels.length && initialSelectedValue === null) {\n      let i = 0;\n      do {\n        if (!disallowSelectionLevels || (\n          !disallowSelectionLevels.find(l => l === levels[i].level))\n          && levels[i].data.length\n        ) {\n          initialSelectedValue = levels[i].data[0];\n          break;\n        }\n        i++;\n      }\n      while (i < levels.length)\n    }\n  }\n\n  const previousSelectedValue = usePrevious(selectedValue);\n\n  const [state, setState] = useState<State>({\n    level: levels[0].level,\n    parent: null,\n    selected: initialSelectedValue,\n    searchQuery: '',\n    highlightedIndex: 0,\n    isOpen: false,\n  });\n\n  const updateState = (newState: State) => {\n    setState(newState)\n  }\n\n  const clearSearch = () => {\n    const newSelected = neverEmpty ? state.selected : null;\n    updateState({\n      level: levels[0].level,\n      parent: null,\n      selected: newSelected,\n      searchQuery: '',\n      highlightedIndex: 0,\n      isOpen: true,\n    })\n    if (onSelect) {\n      onSelect(newSelected);\n    }\n  }\n\n  const selectDatum = (value: Datum) => {\n    updateState({...state, selected: value, isOpen: false, searchQuery: ''})\n    if (onSelect) {\n      onSelect(value);\n    }\n  }\n\n  useEffect(() => {\n    if (previousSelectedValue && !selectedValue && !neverEmpty) {\n      updateState({...state, selected: null, searchQuery: ''})\n    } else if (selectedValue) {\n      updateState({...state, selected: selectedValue})\n    }\n  }, [selectedValue, previousSelectedValue]);\n\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let el: HTMLDivElement;\n    const preventClickFromPropagating = (e: MouseEvent) => {\n      e.stopPropagation();\n    };\n    const closeDropdown = () => setState(current => ({...current, highlightedIndex: 0, isOpen: false}));\n    if (rootRef.current !== null) {\n      el = rootRef.current;\n      el.addEventListener('mousedown', preventClickFromPropagating);\n    }\n\n    document.addEventListener('mousedown', closeDropdown);\n    return () => {\n      document.removeEventListener('mousedown', closeDropdown);\n      if (el) {\n        el.removeEventListener('mousedown', preventClickFromPropagating);\n      }\n    };\n  }, [rootRef]);\n\n  const resultsRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const node = resultsRef.current;\n    if (node) {\n      const liElms = Array.from(node.querySelectorAll<HTMLButtonElement>('li .react-panel-search-list-item'));\n      for (let li of liElms) {\n        li.classList.remove('react-panel-search-highlighted-item')\n      }\n      if (liElms.length) {\n        let index: number;\n        if (state.highlightedIndex >= liElms.length) {\n          index = Math.abs(state.highlightedIndex - liElms.length)\n          updateState({...state, highlightedIndex: 0})\n        } else if (state.highlightedIndex < 0) {\n          index = liElms.length + state.highlightedIndex;\n          updateState({...state, highlightedIndex: liElms.length - 1})\n        } else {\n          index = state.highlightedIndex;\n        }\n        liElms[index].classList.add('react-panel-search-highlighted-item');\n        const highlightedTop = liElms[index].offsetTop;\n        const highlightedBottom = highlightedTop + liElms[index].offsetHeight;\n\n        const containerScrollTop = node.scrollTop;\n        const containerScrollBottom = containerScrollTop + node.offsetHeight;\n\n        if (highlightedBottom > containerScrollBottom) {\n          node.scrollTop = highlightedBottom - node.offsetHeight;\n        } else if (highlightedTop < liElms[index].offsetHeight) {\n          node.scrollTop = 0;\n        } else if (highlightedTop < containerScrollTop) {\n          node.scrollTop = highlightedTop;\n        }\n      }\n    }\n  }, [state, resultsRef]);\n\n\n  const onMouseLeave = () => {\n    if (onHover) {\n      onHover(null);\n    }\n  }\n\n  let listOutput: React.ReactElement<any>;\n\n  if (state.searchQuery.length) {\n    // Loop through each filtered level to make element list\n    // For each parent, find the children in the next level down if not the last level\n    // For each level, check if a parent exists, if so skip it\n    const filteredElms: React.ReactElement<any>[] = [];\n    const renderedIds: Array<string | number> = [];\n    const getChildren = (index: number, parent: Datum['parent_id'], depth: number) => {\n      const elms: React.ReactElement<any>[] = [];\n      sortBy(levels[index].data, ['name']).forEach((child) => {\n        if (child.parent_id === parent &&\n            !renderedIds.includes(child.id) &&\n            child.title.toLowerCase().includes(state.searchQuery.toLowerCase())\n          ) {\n          renderedIds.push(child.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[index + 1] && levels[index + 1].data) {\n            childElms = getChildren(index + 1, child.id, depth + 1);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul\n              className={'react-panel-search-list-inner-container'}\n            >\n              {childElms}\n            </ul>\n          ) : null;\n          const onContinue = () => {\n            const targetIndex = levels.findIndex(({level}) => level === state.level);\n            updateState({\n              ...state, level: levels[targetIndex + 1].level, parent: child.id, \n              highlightedIndex: 0, selected: null, searchQuery: '',\n            })\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(child, Direction.desc);\n            }\n          }\n          const onSearch = () => {\n            selectDatum(child)\n          }\n          const onMouseEnter = () => {\n            if (onHover) {\n              onHover(child);\n            }\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(levels[index].level) ? (\n            <SearchButton\n              onClick={onContinue}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item traverse-only'}\n              style={{paddingLeft: (depth * resultsIdentation) + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              {child.title}\n            </SearchButton>\n          ) : (\n            <SearchButton\n              onClick={onSearch}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item'}\n              style={{paddingLeft: (depth * resultsIdentation) + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              {child.title}\n            </SearchButton>\n          )\n          elms.push(\n            <li\n              className={'react-panel-search-list-item-container'}\n              key={'search-' + child.title + child.id}\n            >\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n      return elms;\n    }\n    levels.forEach(({level, data}, i) => {\n      sortBy(data, ['name']).forEach((datum) => {\n        if (!renderedIds.includes(datum.id) && datum.title.toLowerCase().includes(state.searchQuery.toLowerCase())) {\n          renderedIds.push(datum.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[i + 1] && levels[i + 1].data) {\n            childElms = getChildren(i + 1, datum.id, 1);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul\n              className={'react-panel-search-list-inner-container'}\n            >\n              {childElms}\n            </ul>\n          ) : null;\n          const onContinue = () => {\n            const targetIndex = levels.findIndex(({level}) => level === state.level);\n            updateState({\n              ...state, level: levels[targetIndex + 1].level, parent: datum.id, \n              highlightedIndex: 0, selected: null, searchQuery: '',\n            })\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(datum, Direction.desc);\n            }\n          }\n          const onSearch = () => {\n            selectDatum(datum)\n          }\n          const onMouseEnter = () => {\n            if (onHover) {\n              onHover(datum);\n            }\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(level) ? (\n            <SearchButton\n              onClick={onContinue}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item traverse-only'}\n              style={{paddingLeft: resultsIdentation + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              {datum.title}\n            </SearchButton>\n          ) : (\n            <SearchButton\n              onClick={onSearch}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item'}\n              style={{paddingLeft: resultsIdentation + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              {datum.title}\n            </SearchButton>\n          )\n          filteredElms.push(\n            <li\n              className={'react-panel-search-list-item-container'}\n              key={'search-' + datum.title + datum.id}\n            >\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n    });\n    listOutput = (\n      <ul\n        className={'react-panel-search-list-root-container'}\n      >\n        {filteredElms}\n      </ul>\n    );\n  } else {\n    const targetIndex = levels.findIndex(({level}) => level === state.level);\n    const listItems = levels[targetIndex].data.filter(({parent_id}) => parent_id === state.parent).map(d => {\n      const onContinue = () => {\n        updateState({\n          ...state, level: levels[targetIndex + 1].level, parent: d.id, \n          highlightedIndex: 0,\n        })\n        if (onTraverseLevel !== undefined) {\n          onTraverseLevel(d, Direction.desc);\n        }\n      }\n      const onSearch = () => {\n        if (disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)) {\n          onContinue();\n        } else {\n          selectDatum(d)\n        }\n      }\n      const ArrowButton = disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)\n        ? TraverseOnlyButton\n        : NextButton;\n      const className = disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)\n        ? 'react-panel-search-list-item traverse-only'\n        : 'react-panel-search-list-item';\n      const continueButton = targetIndex !== levels.length - 1 ? (\n        <ArrowButton\n          className={'react-panel-search-next-button'}\n          onClick={onContinue}\n          dangerouslySetInnerHTML={{__html: chevronSVG}}\n        />\n      ) : null;\n\n      const onMouseEnter = () => {\n        if (onHover) {\n          onHover(d);\n        }\n      }\n      const count = showCount && targetIndex !== levels.length - 1\n        ? `(${levels[targetIndex + 1].data.filter(({parent_id}) => parent_id === d.id).length})`\n        : null;\n      return (\n        <PanelItem\n          key={d.id}\n          className={'react-panel-search-panel-item-container'}\n        >\n          <PanelButton\n            onClick={onSearch}\n            className={className}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n          >{d.title} {count}</PanelButton> {continueButton}\n        </PanelItem>\n      );\n    });\n\n    const parentDatum = parent === null || targetIndex === 0\n      ? undefined : levels[targetIndex - 1].data.find(({id}) => id === state.parent);\n\n    const titleText = topLevelTitle ? <span>{topLevelTitle}</span> : null;\n\n    const breadCrumb = !parentDatum ? (\n      <TitleOuter\n        className={'react-panel-search-current-tier-static-title-outer'}\n      >\n        <Title\n          className={'react-panel-search-current-tier-title'}\n        >\n          {titleText}\n        </Title>\n      </TitleOuter>\n    ) : (\n      <BreadCrumbOuter\n        className={'react-panel-search-current-tier-breadcrumb-outer'}\n      >\n        <Title\n          className={'react-panel-search-current-tier-title'}\n          onClick={() => {\n            updateState({\n              ...state,\n              level: levels[targetIndex - 1].level,\n              parent: parentDatum.parent_id,\n              highlightedIndex: 0,\n            });\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(parentDatum, Direction.asc);\n            }\n          }}\n        >\n          <NavButton\n            className={'react-panel-search-previous-button'}\n            dangerouslySetInnerHTML={{__html: chevronSVG}}\n          />\n          <span\n            className={'react-panel-search-current-tier-text'}\n          >\n            {parentDatum.title}\n          </span>\n        </Title>\n      </BreadCrumbOuter>\n    )\n    listOutput = (\n      <React.Fragment>\n        {breadCrumb}\n        <ul\n          className={'react-panel-search-panel-list-root-container'}\n        >\n            {listItems}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.which === 40 || e.keyCode === 40) {\n      updateState({...state, highlightedIndex: state.highlightedIndex + 1})\n    } else if (e.which === 38 || e.keyCode === 38) {\n      updateState({...state, highlightedIndex: state.highlightedIndex - 1})\n    } else if (e.which === 13 || e.keyCode === 13) { \n      const node = resultsRef.current;\n      if (node) {\n        const highlightedElm = node.querySelector<HTMLButtonElement>('li .react-panel-search-highlighted-item');\n        if (highlightedElm) {\n          highlightedElm.click();\n          if (!highlightedElm.classList.contains('traverse-only')) {\n            const focusedInput = document.activeElement as HTMLElement;\n            if (focusedInput) {\n              focusedInput.blur();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const searchResults = state.isOpen ? (\n    <SearchResults\n      ref={resultsRef}\n      className={'react-panel-search-search-results'}\n    >\n      {listOutput}\n    </SearchResults>\n  ) : null;\n\n  return (\n    <Container\n      ref={rootRef}\n      className={'react-panel-search-root-container'}\n      style={{zIndex: state.isOpen ? 2000 : undefined}}\n    >\n      <SearchBar\n        className={'react-panel-search-search-bar'}\n      >\n        <StandardSearch\n          placeholder={state.selected ? state.selected.title : defaultPlaceholderText}\n          setSearchQuery={val => updateState({\n            ...state,\n            searchQuery: val,\n            level: levels[0].level,\n            parent: null,\n            highlightedIndex: 0,\n          })}\n          initialQuery={''}\n          onClear={clearSearch}\n          hasSelection={state.selected ? true : false}\n          neverEmpty={neverEmpty}\n          handleKeyDown={handleKeyDown}\n          onFocus={() => updateState({...state, isOpen: true})}\n          isOpen={state.isOpen}\n          setIsOpen={(isOpen) => updateState({...state, isOpen})}\n        />\n      </SearchBar>\n      {searchResults}\n    </Container>\n  );\n}\n","import React from 'react'\nimport sortBy from 'lodash/sortBy';\nimport Root, {Direction} from './components/Root';\n\n// Singular datum\nexport interface Datum {\n  id: number | string;\n  title: string;\n  // levels can be either numbers or strings,\n  // order is based on value high-to low then\n  // alphabetical A-Z\n  level: number | string;\n  // all data points are expected to have the\n  // same hierarchy.\n  // i.e. grandparent -> parent -> child\n  // NOT  grandparent -> child\n  // when searching for an elements parent,\n  // it will traverse one level back up the\n  // level tree. Top level parent must have a\n  // parent_id of null\n  parent_id: number | string | null;\n}\n\n// Levels are groupings of all datum\n// within the same level hierarchy\nexport interface Level {\n  // each level is identified by it's unique\n  // level taken from the provided data\n  level: Datum['level'];\n  // each level contains a group of all the given\n  // data at that level\n  data: Datum[];\n}\n\ninterface Props {\n  data: Datum[];\n  topLevelTitle?: string;\n  onSelect?: (value: Datum | null) => void;\n  onHover?: (value: Datum | null) => void;\n  onTraverseLevel?: (value: Datum, direction: Direction) => void;\n  selectedValue?: Datum | null;\n  disallowSelectionLevels?: Level['level'][];\n  defaultPlaceholderText?: string;\n  showCount?: boolean;\n  resultsIdentation?: number;\n  neverEmpty?: boolean;\n}\n\nconst PanelSearch = (props: Props) => {\n  const {\n    data, onSelect, onHover, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel, defaultPlaceholderText, showCount, resultsIdentation, neverEmpty,\n  } = props;\n  const levels: Level[] = [];\n  sortBy(data, ({title}) => title.toLowerCase()).forEach(datum => {\n    let targetIndex = levels.findIndex(({level}) => level === datum.level);\n    if (targetIndex === -1) {\n      levels.push({\n        level: datum.level,\n        data: [datum],\n      })\n    } else {\n      levels[targetIndex].data.push(datum);\n    }\n  });\n  if (levels && levels.length) {\n    const sortedLevels = sortBy(levels, ['level']);\n    return (\n      <Root\n        levels={sortedLevels}\n        onSelect={onSelect}\n        onHover={onHover}\n        onTraverseLevel={onTraverseLevel}\n        selectedValue={selectedValue ? selectedValue : null}\n        topLevelTitle={topLevelTitle}\n        disallowSelectionLevels={disallowSelectionLevels}\n        defaultPlaceholderText={defaultPlaceholderText ? defaultPlaceholderText : 'Search'}\n        showCount={showCount ? showCount : false}\n        resultsIdentation={resultsIdentation !== undefined ? resultsIdentation : 1}\n        neverEmpty={neverEmpty ? neverEmpty : false}\n      />\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default PanelSearch;\n","import React, {useState} from 'react';\nimport PanelSearch, {Datum} from 'react-panel-search';\n\nimport raw from 'raw.macro';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 1.4rem;\n  font-weight: 400;\n  text-align: center;\n  color: #444;\n  display: flex;\n  align-items: center;\n  max-width: 1000px;\n  margin-bottom: 3rem;\n`;\n\nconst ClearButton = styled.button`\n  padding: 0.4rem;\n  text-transform: uppercase;\n  background-color: #444;\n  border: none;\n  color: #fff;\n  text-align: center;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 0.8rem;\n  margin-left: 0.8rem;\n  cursor: pointer;\n`;\n\nconst SearchContainer = styled.div`\n  width: 1000px;\n  max-width: 100%;\n`;\n\ninterface NaicsDatum {\n  naics_id: number;\n  naics_code: string;\n  title: string;\n  level: number;\n  parent_id: number | null;\n  parent_code: string | null;\n  code_hierarchy: string;\n  naics_id_hierarchy: string;\n}\n\nconst rawData: NaicsDatum[] = JSON.parse(raw('./naics_data.json'));\n\nconst App = () => {\n  const [selectedValue, setSelectedValue] = useState<Datum | null>(null);\n\n  const data: Datum[] = rawData.map(datum => {\n    return {\n      id: datum.naics_id,\n      title: datum.title,\n      level: datum.level,\n      parent_id: datum.parent_id,\n    }\n  })\n\n  const selectedText = selectedValue ? 'Selected: ' + selectedValue.title : 'Nothing selected';\n  const clearButton  = selectedValue\n    ? <ClearButton onClick={() => setSelectedValue(null)}>Clear</ClearButton>\n    : <ClearButton onClick={() => setSelectedValue(data[Math.floor(Math.random() * data.length)])}>Set value randomly</ClearButton>\n\n  return (\n    <Root>\n      <PageTitle>{selectedText} {clearButton}</PageTitle>\n      <SearchContainer>\n        <PanelSearch\n          data={data}\n          topLevelTitle={'All Industries'}\n          disallowSelectionLevels={[2]}\n          onSelect={setSelectedValue}\n          selectedValue={selectedValue}\n          showCount={true}\n          resultsIdentation={1.75}\n        />\n      </SearchContainer>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}