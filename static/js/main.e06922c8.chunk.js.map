{"version":3,"sources":["../../src/components/StandardSearch.tsx","../../src/components/Root.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["SearchContainer","styled","SearchBar","$hasSelection","ClearButton","StandardSearch","props","onFocus","previousPlaceholder","usePrevious","searchEl","useRef","clearEl","onChange","debounce","setSearchQuery","useEffect","node","initialQuery","hasSelection","placeholder","ref","type","autoComplete","onKeyDown","handleKeyDown","style","display","marginRight","undefined","onClick","onClear","Container","Backdrop","SearchResults","Title","NavButton","NextButton","PanelItem","ButtonBase","PanelButton","SearchButton","disallowSelectionLevels","previousSelectedValue","useState","level","levels","parent","selected","searchQuery","highlightedIndex","isOpen","updateState","newState","setState","selectDatum","value","onSelect","selectedValue","resultsRef","liElms","Array","li","state","index","Math","highlightedTop","highlightedBottom","containerScrollTop","filteredElms","renderedIds","data","sortBy","datum","childList","childElms","i","getChildren","elms","child","React","resultElm","className","key","id","listOutput","targetIndex","listItems","parent_id","d","onContinue","continueButton","parentDatum","titleText","topLevelTitle","breadCrumb","backdrop","searchResults","zIndex","val","e","highlightedElm","focusedInput","document","sortedLevels","Root","div","PageTitle","h1","button","rawData","JSON","parse","App","setSelectedValue","map","naics_id","title","selectedText","clearButton","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e06922c8.chunk.js","sourcesContent":["import { debounce } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport usePrevious from 'react-use-previous-hook';\n\nconst SearchContainer = styled.label`\n  position: relative;\n  display: flex;\n`;\n\nconst SearchBar = styled.input<{$hasSelection: boolean}>`\n  width: 100%;\n  max-width: 400px;\n  box-sizing: border-box;\n  padding: 0.5rem;\n  box-sizing: border-box;\n  border: solid 1px #dfdfdf;\n  font-size: 1.2rem;\n  font-weight: 300;\n\n  ${({$hasSelection}) => $hasSelection ? (\n    `&::placeholder {\n      color: rgb(0, 0, 0);\n    }`\n  ) : ''}\n\n  &:focus {\n    &::placeholder {\n      color: rgb(255, 255, 255);\n    }\n  }\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  top: 2px;\n  bottom: 2px;\n  right: 2px;\n  line-height: 0;\n  font-size: 1.2rem;\n  padding: 0.4rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #696969;\n  background-color: #fff;\n  border: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n\n  &:hover {\n    color: #908d8d;\n    cursor: pointer;\n  }\n`;\n\ninterface Props {\n  placeholder: string;\n  setSearchQuery: (value: string) => void;\n  initialQuery: string;\n  onClear: () => void;\n  hasSelection: boolean;\n  handleKeyDown: (event: React.KeyboardEvent) => void;\n  onFocus: () => void;\n  type?: string;\n}\n\nconst StandardSearch = (props: Props) => {\n  const { placeholder, setSearchQuery, initialQuery, type, onClear, hasSelection, handleKeyDown, onFocus } = props;\n\n  const previousPlaceholder = usePrevious(placeholder);\n\n  const searchEl = useRef<HTMLInputElement | null>(null);\n  const clearEl = useRef<HTMLButtonElement | null>(null);\n\n  const onChange = debounce(() => {\n    if (searchEl !== null && searchEl.current !== null) {\n      setSearchQuery(searchEl.current.value);\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = searchEl.current.value.length || hasSelection ? 'block' : 'none';\n      }\n    }\n  }, 400);\n\n  const clearSearch = () => {\n    if (searchEl !== null && searchEl.current !== null) {\n      searchEl.current.value = '';\n      searchEl.current.focus();\n      setSearchQuery(searchEl.current.value);\n      onClear();\n    }\n    if (clearEl && clearEl.current) {\n      clearEl.current.style.display = 'none';\n    }\n  };\n\n  useEffect(() => {\n    const node = searchEl.current;\n    if (node) {\n      if (!node.value) {\n        node.value = initialQuery;\n      }\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = node.value.length || hasSelection ? 'block' : 'none';\n      }\n      if (node.value && hasSelection && previousPlaceholder !== placeholder) {\n        node.value = '';\n      }\n    }\n  }, [searchEl, initialQuery, hasSelection, placeholder, previousPlaceholder]);\n\n  return (\n    <SearchContainer>\n      <SearchBar\n        ref={searchEl}\n        type={type ? type : 'text'}\n        placeholder={placeholder}\n        onChange={onChange}\n        autoComplete={'off'}\n        $hasSelection={hasSelection}\n        onKeyDown={handleKeyDown}\n        onFocus={onFocus}\n      />\n      <ClearButton\n        ref={clearEl}\n        style={{\n          display: 'none',\n          marginRight: type === 'number' ? '1rem' : undefined,\n        }}\n        onClick={clearSearch}\n      >\n        ×\n      </ClearButton>\n    </SearchContainer>\n  );\n};\n\nexport default StandardSearch;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {Level, Datum} from '../'\nimport StandardSearch from './StandardSearch';\nimport sortBy from 'lodash/sortBy';\nimport usePrevious from 'react-use-previous-hook';\nimport styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 400px;\n  color: #333;\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li {\n    li {\n      padding-left: 1rem;\n\n      button:before {\n        content: '↳';\n        margin-right: 0.5rem;\n      }\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: #f3f3f3;\n  }\n\n`;\n\nconst Backdrop = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n`;\n\nconst SearchBar = styled.div`\n  position: relative;\n`;\n\nconst SearchResults = styled.div`\n  position: relative;\n  max-height: 300px;\n  overflow: auto;\n  background-color: #fff;\n\n  ul:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: #fff;\n    }\n  }\n`;\n\nconst Title = styled.div`\n  font-weight: 600;\n  padding: 0.3rem 0.75rem;\n  display: grid;\n  grid-column-gap: 0.5rem;\n  grid-template-columns: auto 1fr;\n  border-bottom: solid 2px #749aca;\n  font-size: 0.85rem;\n`;\n\nconst NavButton = styled.button`\n  line-height: 1;\n  font-size: 1rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #fff;\n  background-color: #749aca;\n  border: none;\n  display: flex;\n  justify-content: center;\n  height: 1rem;\n  width: 1rem;\n  margin: auto;\n\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst NextButton = styled(NavButton)`\n  grid-row: 1;\n  grid-column: 2;\n  position: relative;\n  margin-right: 1rem;\n`;\n\nconst PanelItem = styled.li`\n  display: grid;\n  grid-template-columns: 1fr auto;\n`;\n\nconst ButtonBase = styled.button`\n  padding: 1rem 0.75rem;\n  font-size: 0.75rem;\n  background-color: #fff;\n  border: none;\n  display: block;\n  width: 100%;\n  text-align: left;\n  padding-right: 1.5rem;\n  box-sizing: border-box;\n\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst PanelButton = styled(ButtonBase)`\n  grid-row: 1;\n  grid-column: 1 / 3;\n`;\n\nconst SearchButton = styled(ButtonBase)`\n  padding: 0.6rem 0.75rem\n`;\n\ninterface Props {\n  levels: Level[];\n  onSelect: undefined | ((value: Datum | null) => void);\n  selectedValue: Datum | null;\n  topLevelTitle: string | undefined;\n  disallowSelectionLevels: undefined | (Level['level'][]);\n}\n\ninterface State {\n  level: Datum['level'];\n  parent: Datum['parent_id'];\n  selected: Datum | null;\n  searchQuery: string;\n  highlightedIndex: number;\n  isOpen: boolean;\n}\n\nexport default (props: Props) => {\n  const {\n    levels, onSelect, selectedValue, topLevelTitle, disallowSelectionLevels,\n  } = props;\n  const previousSelectedValue = usePrevious(selectedValue);\n\n  const [state, setState] = useState<State>({\n    level: levels[0].level,\n    parent: null,\n    selected: selectedValue,\n    searchQuery: '',\n    highlightedIndex: 0,\n    isOpen: false,\n  });\n\n  const updateState = (newState: State) => {\n    setState(newState)\n  }\n\n  const clearSearch = () => {\n    updateState({...state, selected: null, searchQuery: '', highlightedIndex: 0, isOpen: true})\n    if (onSelect) {\n      onSelect(null);\n    }\n  }\n\n  const selectDatum = (value: Datum) => {\n    updateState({...state, selected: value, isOpen: false})\n    if (onSelect) {\n      onSelect(value);\n    }\n  }\n\n  useEffect(() => {\n    if (previousSelectedValue && !selectedValue) {\n      updateState({...state, selected: null, searchQuery: ''})\n    }\n  }, [selectedValue, previousSelectedValue]);\n\n  const resultsRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const node = resultsRef.current;\n    if (node) {\n      const liElms = Array.from(node.querySelectorAll<HTMLButtonElement>('li .react-panel-search-list-item'));\n      for (let li of liElms) {\n        li.classList.remove('react-panel-search-highlighted-item')\n      }\n      if (liElms.length) {\n        let index: number;\n        if (state.highlightedIndex >= liElms.length) {\n          index = Math.abs(state.highlightedIndex - liElms.length)\n          updateState({...state, highlightedIndex: 0})\n        } else if (state.highlightedIndex < 0) {\n          index = liElms.length + state.highlightedIndex;\n          updateState({...state, highlightedIndex: liElms.length - 1})\n        } else {\n          index = state.highlightedIndex;\n        }\n        liElms[index].classList.add('react-panel-search-highlighted-item');\n        const highlightedTop = liElms[index].offsetTop;\n        const highlightedBottom = highlightedTop + liElms[index].offsetHeight;\n\n        const containerScrollTop = node.scrollTop;\n        const containerScrollBottom = containerScrollTop + node.offsetHeight;\n\n        if (highlightedBottom > containerScrollBottom) {\n          node.scrollTop = highlightedBottom - node.offsetHeight;\n        } else if (highlightedTop < containerScrollTop) {\n          node.scrollTop = highlightedTop;\n        }\n      }\n    }\n  }, [state]);\n\n  let listOutput: React.ReactElement<any>;\n\n  if (state.searchQuery.length) {\n    // Loop through each filtered level to make element list\n    // For each parent, find the children in the next level down if not the last level\n    // For each level, check if a parent exists, if so skip it\n    const filteredElms: React.ReactElement<any>[] = [];\n    const renderedIds: Array<string | number> = [];\n    const getChildren = (index: number, parent: Datum['parent_id']) => {\n      const elms: React.ReactElement<any>[] = [];\n      sortBy(levels[index].data, ['name']).forEach((child) => {\n        if (child.parent_id === parent &&\n            !renderedIds.includes(child.id) &&\n            child.title.toLowerCase().includes(state.searchQuery.toLowerCase())\n          ) {\n          renderedIds.push(child.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[index + 1] && levels[index + 1].data) {\n            childElms = getChildren(index + 1, child.id);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul>\n              {childElms}\n            </ul>\n          ) : null;\n          const onSearch = () => {\n            selectDatum(child)\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(levels[index].level) ? (\n            <span>{child.title}</span>\n          ) : (\n            <SearchButton onClick={onSearch} className={'react-panel-search-list-item'}>{child.title}</SearchButton>\n          )\n          elms.push(\n            <li\n              key={'search-' + child.title + child.id}\n            >\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n      return elms;\n    }\n    levels.forEach(({level, data}, i) => {\n      sortBy(data, ['name']).forEach((datum) => {\n        if (!renderedIds.includes(datum.id) && datum.title.toLowerCase().includes(state.searchQuery.toLowerCase())) {\n          renderedIds.push(datum.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[i + 1] && levels[i + 1].data) {\n            childElms = getChildren(i + 1, datum.id);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul>\n              {childElms}\n            </ul>\n          ) : null;\n          const onSearch = () => {\n            selectDatum(datum)\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(level) ? (\n            <span>{datum.title}</span>\n          ) : (\n            <SearchButton onClick={onSearch} className={'react-panel-search-list-item'}>{datum.title}</SearchButton>\n          )\n          filteredElms.push(\n            <li key={'search-' + datum.title + datum.id}>\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n    });\n    listOutput = (\n      <ul>\n        {filteredElms}\n      </ul>\n    );\n  } else {\n    const targetIndex = levels.findIndex(({level}) => level === state.level);\n    const listItems = levels[targetIndex].data.filter(({parent_id}) => parent_id === state.parent).map(d => {\n      const onContinue = () => {\n        updateState({\n          ...state, level: levels[targetIndex + 1].level, parent: d.id, \n          highlightedIndex: 0,\n        })\n      }\n      const onSearch = () => {\n        if (disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)) {\n          onContinue();\n        } else {\n          selectDatum(d)\n        }\n      }\n      const continueButton = targetIndex !== levels.length - 1 ? (\n        <NextButton onClick={onContinue}>\n          {'>'}\n        </NextButton>\n      ) : null;\n      return (\n        <PanelItem key={d.id}>\n          <PanelButton onClick={onSearch} className={'react-panel-search-list-item'}>{d.title}</PanelButton> {continueButton}\n        </PanelItem>\n      );\n    });\n\n    const parentDatum = parent === null || targetIndex === 0\n      ? undefined : levels[targetIndex - 1].data.find(({id}) => id === state.parent);\n\n    const titleText = topLevelTitle ? <span>{topLevelTitle}</span> : null;\n\n    const breadCrumb = !parentDatum ? titleText : (\n      <React.Fragment>\n        <NavButton\n          onClick={() => updateState({\n            ...state,\n            level: levels[targetIndex - 1].level,\n            parent: parentDatum.parent_id,\n            highlightedIndex: 0,\n          })}\n        >\n          {'<'}\n        </NavButton>\n        <span>\n          {parentDatum.title}\n        </span>\n      </React.Fragment>\n    )\n    listOutput = (\n      <React.Fragment>\n        <Title>\n          {breadCrumb}\n        </Title>\n        <ul>\n            {listItems}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.which === 40 || e.keyCode === 40) {\n      updateState({...state, highlightedIndex: state.highlightedIndex + 1})\n    } else if (e.which === 38 || e.keyCode === 38) {\n      updateState({...state, highlightedIndex: state.highlightedIndex - 1})\n    } else if (e.which === 13 || e.keyCode === 13) { \n      const node = resultsRef.current;\n      if (node) {\n        const highlightedElm = node.querySelector<HTMLButtonElement>('li .react-panel-search-highlighted-item');\n        if (highlightedElm) {\n          highlightedElm.click();\n          const focusedInput = document.activeElement as HTMLElement;\n          if (focusedInput) {\n            focusedInput.blur();\n          }\n        }\n      }\n    }\n  }\n\n  const backdrop  = state.isOpen ? (\n    <Backdrop\n      onClick={() => updateState({...state, highlightedIndex: 0, isOpen: false})}\n    />\n  ) : null;\n\n  const searchResults = state.isOpen ? (\n    <SearchResults ref={resultsRef}>\n      {listOutput}\n    </SearchResults>\n  ) : null;\n\n  return (\n    <Container\n      style={{zIndex: state.isOpen ? 2000 : undefined}}\n    >\n      {backdrop}\n      <SearchBar>\n        <StandardSearch\n          placeholder={state.selected ? state.selected.title : 'Search'}\n          setSearchQuery={val => updateState({\n            ...state,\n            searchQuery: val,\n            level: levels[0].level,\n            parent: null,\n            highlightedIndex: 0,\n          })}\n          initialQuery={''}\n          onClear={clearSearch}\n          hasSelection={state.selected ? true : false}\n          handleKeyDown={handleKeyDown}\n          onFocus={() => updateState({...state, isOpen: true})}\n        />\n      </SearchBar>\n      {searchResults}\n    </Container>\n  );\n}\n","import React from 'react'\nimport sortBy from 'lodash/sortBy';\nimport Root from './components/Root';\n\n// Singular datum\nexport interface Datum {\n  id: number | string;\n  title: string;\n  // levels can be either numbers or strings,\n  // order is based on value high-to low then\n  // alphabetical A-Z\n  level: number | string;\n  // all data points are expected to have the\n  // same hierarchy.\n  // i.e. grandparent -> parent -> child\n  // NOT  grandparent -> child\n  // when searching for an elements parent,\n  // it will traverse one level back up the\n  // level tree. Top level parent must have a\n  // parent_id of null\n  parent_id: number | string | null;\n}\n\n// Levels are groupings of all datum\n// within the same level hierarchy\nexport interface Level {\n  // each level is identified by it's unique\n  // level taken from the provided data\n  level: Datum['level'];\n  // each level contains a group of all the given\n  // data at that level\n  data: Datum[];\n}\n\ninterface Props {\n  data: Datum[];\n  topLevelTitle?: string;\n  onSelect?: (value: Datum | null) => void;\n  selectedValue?: Datum | null;\n  disallowSelectionLevels?: Level['level'][];\n}\n\nconst PanelSearch = (props: Props) => {\n  const {\n    data, onSelect, selectedValue, topLevelTitle, disallowSelectionLevels,\n  } = props;\n  const levels: Level[] = [];\n  data.forEach(datum => {\n    let targetIndex = levels.findIndex(({level}) => level === datum.level);\n    if (targetIndex === -1) {\n      levels.push({\n        level: datum.level,\n        data: [datum],\n      })\n    } else {\n      levels[targetIndex].data.push(datum);\n    }\n  });\n  if (levels && levels.length) {\n    const sortedLevels = sortBy(levels, ['level']);\n    return (\n      <div>\n        <Root\n          levels={sortedLevels}\n          onSelect={onSelect}\n          selectedValue={selectedValue ? selectedValue : null}\n          topLevelTitle={topLevelTitle}\n          disallowSelectionLevels={disallowSelectionLevels}\n        />\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default PanelSearch;\n","import React, {useState} from 'react'\nimport PanelSearch, {Datum} from 'react-panel-search'\n\nimport raw from 'raw.macro';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 1.4rem;\n  font-weight: 400;\n  text-align: center;\n  color: #444;\n  display: flex;\n  align-items: center;\n  max-width: 400px;\n  margin-bottom: 3rem;\n`;\n\nconst ClearButton = styled.button`\n  padding: 0.4rem;\n  text-transform: uppercase;\n  background-color: #444;\n  border: none;\n  color: #fff;\n  text-align: center;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 0.8rem;\n  margin-left: 0.8rem;\n  cursor: pointer;\n`;\n\nconst SearchContainer = styled.div`\n  width: 400px;\n  max-width: 100%;\n`;\n\ninterface NaicsDatum {\n  naics_id: number;\n  naics_code: string;\n  title: string;\n  level: number;\n  parent_id: number | null;\n  parent_code: string | null;\n  code_hierarchy: string;\n  naics_id_hierarchy: string;\n}\n\nconst rawData: NaicsDatum[] = JSON.parse(raw('./naics_data.json'));\n\nconst App = () => {\n  const [selectedValue, setSelectedValue] = useState<Datum | null>(null);\n\n  const data: Datum[] = rawData.map(datum => {\n    return {\n      id: datum.naics_id,\n      title: datum.title,\n      level: datum.level,\n      parent_id: datum.parent_id,\n    }\n  })\n\n  const selectedText = selectedValue ? 'Selected: ' + selectedValue.title : 'Nothing selected';\n  const clearButton  = selectedValue ? <ClearButton onClick={() => setSelectedValue(null)}>Clear</ClearButton> : null;\n\n  return (\n    <Root>\n      <PageTitle>{selectedText} {clearButton}</PageTitle>\n      <SearchContainer>\n        <PanelSearch\n          data={data}\n          topLevelTitle={'All Industries'}\n          onSelect={setSelectedValue}\n          selectedValue={selectedValue}\n        />\n      </SearchContainer>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}