{"version":3,"sources":["../../src/components/StandardSearch.tsx","../../src/components/Root.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["SearchContainer","styled","SearchBar","ClearButton","StandardSearch","props","placeholder","setSearchQuery","initialQuery","type","onClear","hasSelection","handleKeyDown","onFocus","previousPlaceholder","usePrevious","searchEl","useRef","clearEl","onChange","debounce","useEffect","node","ref","autoComplete","onKeyDown","style","display","marginRight","undefined","onClick","Container","Backdrop","SearchResults","Title","NavButton","NextButton","PanelItem","ButtonBase","PanelButton","SearchButton","Direction","levels","onSelect","selectedValue","topLevelTitle","disallowSelectionLevels","onTraverseLevel","onHover","previousSelectedValue","useState","level","parent","selected","searchQuery","highlightedIndex","isOpen","state","setState","updateState","newState","selectDatum","value","resultsRef","liElms","Array","li","index","Math","highlightedTop","highlightedBottom","containerScrollTop","onMouseLeave","filteredElms","renderedIds","data","sortBy","datum","childList","childElms","i","getChildren","elms","child","React","onMouseEnter","resultElm","targetIndex","className","key","id","listOutput","listItems","d","onContinue","continueButton","parentDatum","titleText","breadCrumb","backdrop","searchResults","zIndex","val","e","highlightedElm","focusedInput","document","sortedLevels","Root","div","PageTitle","h1","button","rawData","JSON","parse","App","setSelectedValue","map","naics_id","title","parent_id","selectedText","clearButton","floor","random","length","console","log","direction","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d11faefe.chunk.js","sourcesContent":["import { debounce } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport usePrevious from 'react-use-previous-hook';\n\nconst SearchContainer = styled.label`\n  position: relative;\n  display: flex;\n`;\n\nconst SearchBar = styled.input<{$hasSelection: boolean}>`\n  width: 100%;\n  max-width: 400px;\n  box-sizing: border-box;\n  padding: 0.5rem;\n  box-sizing: border-box;\n  border: solid 1px #dfdfdf;\n  font-size: 1.2rem;\n  font-weight: 300;\n\n  ${({$hasSelection}) => $hasSelection ? (\n    `&::placeholder {\n      color: rgb(0, 0, 0);\n    }`\n  ) : ''}\n\n  &:focus {\n    &::placeholder {\n      color: rgb(255, 255, 255);\n    }\n  }\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  top: 2px;\n  bottom: 2px;\n  right: 2px;\n  line-height: 0;\n  font-size: 1.2rem;\n  padding: 0.4rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #696969;\n  background-color: #fff;\n  border: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n\n  &:hover {\n    color: #908d8d;\n    cursor: pointer;\n  }\n`;\n\ninterface Props {\n  placeholder: string;\n  setSearchQuery: (value: string) => void;\n  initialQuery: string;\n  onClear: () => void;\n  hasSelection: boolean;\n  handleKeyDown: (event: React.KeyboardEvent) => void;\n  onFocus: () => void;\n  type?: string;\n}\n\nconst StandardSearch = (props: Props) => {\n  const { placeholder, setSearchQuery, initialQuery, type, onClear, hasSelection, handleKeyDown, onFocus } = props;\n\n  const previousPlaceholder = usePrevious(placeholder);\n\n  const searchEl = useRef<HTMLInputElement | null>(null);\n  const clearEl = useRef<HTMLButtonElement | null>(null);\n\n  const onChange = debounce(() => {\n    if (searchEl !== null && searchEl.current !== null) {\n      setSearchQuery(searchEl.current.value);\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = searchEl.current.value.length || hasSelection ? 'block' : 'none';\n      }\n    }\n  }, 400);\n\n  const clearSearch = () => {\n    if (searchEl !== null && searchEl.current !== null) {\n      searchEl.current.value = '';\n      searchEl.current.focus();\n      setSearchQuery(searchEl.current.value);\n      onClear();\n    }\n    if (clearEl && clearEl.current) {\n      clearEl.current.style.display = 'none';\n    }\n  };\n\n  useEffect(() => {\n    const node = searchEl.current;\n    if (node) {\n      if (!node.value) {\n        node.value = initialQuery;\n      }\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = node.value.length || hasSelection ? 'block' : 'none';\n      }\n      if (node.value && hasSelection && previousPlaceholder !== placeholder) {\n        node.value = '';\n      }\n    }\n  }, [searchEl, initialQuery, hasSelection, placeholder, previousPlaceholder]);\n\n  return (\n    <SearchContainer>\n      <SearchBar\n        ref={searchEl}\n        type={type ? type : 'text'}\n        placeholder={placeholder}\n        onChange={onChange}\n        autoComplete={'off'}\n        $hasSelection={hasSelection}\n        onKeyDown={handleKeyDown}\n        onFocus={onFocus}\n      />\n      <ClearButton\n        ref={clearEl}\n        style={{\n          display: 'none',\n          marginRight: type === 'number' ? '1rem' : undefined,\n        }}\n        onClick={clearSearch}\n      >\n        ×\n      </ClearButton>\n    </SearchContainer>\n  );\n};\n\nexport default StandardSearch;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {Level, Datum} from '../'\nimport StandardSearch from './StandardSearch';\nimport sortBy from 'lodash/sortBy';\nimport usePrevious from 'react-use-previous-hook';\nimport styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 400px;\n  color: #333;\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li {\n    li {\n      padding-left: 1rem;\n\n      button:before {\n        content: '↳';\n        margin-right: 0.5rem;\n      }\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: #f3f3f3;\n  }\n\n`;\n\nconst Backdrop = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n`;\n\nconst SearchBar = styled.div`\n  position: relative;\n`;\n\nconst SearchResults = styled.div`\n  position: relative;\n  max-height: 300px;\n  overflow: auto;\n  background-color: #fff;\n\n  ul:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: #fff;\n    }\n  }\n`;\n\nconst Title = styled.div`\n  font-weight: 600;\n  padding: 0.3rem 0.75rem;\n  display: grid;\n  grid-column-gap: 0.5rem;\n  grid-template-columns: auto 1fr;\n  border-bottom: solid 2px #749aca;\n  font-size: 0.85rem;\n`;\n\nconst NavButton = styled.button`\n  line-height: 1;\n  font-size: 1rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #fff;\n  background-color: #749aca;\n  border: none;\n  display: flex;\n  justify-content: center;\n  height: 1rem;\n  width: 1rem;\n  margin: auto;\n\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst NextButton = styled(NavButton)`\n  grid-row: 1;\n  grid-column: 2;\n  position: relative;\n  margin-right: 1rem;\n`;\n\nconst PanelItem = styled.li`\n  display: grid;\n  grid-template-columns: 1fr auto;\n`;\n\nconst ButtonBase = styled.button`\n  padding: 1rem 0.75rem;\n  font-size: 0.75rem;\n  background-color: #fff;\n  border: none;\n  display: block;\n  width: 100%;\n  text-align: left;\n  padding-right: 1.5rem;\n  box-sizing: border-box;\n\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst PanelButton = styled(ButtonBase)`\n  grid-row: 1;\n  grid-column: 1 / 3;\n`;\n\nconst SearchButton = styled(ButtonBase)`\n  padding: 0.6rem 0.75rem\n`;\n\nexport enum Direction {\n  asc = 'asc',\n  desc = 'desc',\n}\n\ninterface Props {\n  levels: Level[];\n  onSelect: undefined | ((value: Datum | null) => void);\n  onTraverseLevel: undefined | ((value: Datum, direction: Direction) => void);\n  onHover: undefined | ((value: Datum | null) => void);\n  selectedValue: Datum | null;\n  topLevelTitle: string | undefined;\n  disallowSelectionLevels: undefined | (Level['level'][]);\n}\n\ninterface State {\n  level: Datum['level'];\n  parent: Datum['parent_id'];\n  selected: Datum | null;\n  searchQuery: string;\n  highlightedIndex: number;\n  isOpen: boolean;\n}\n\nexport default (props: Props) => {\n  const {\n    levels, onSelect, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel, onHover,\n  } = props;\n  const previousSelectedValue = usePrevious(selectedValue);\n\n  const [state, setState] = useState<State>({\n    level: levels[0].level,\n    parent: null,\n    selected: selectedValue,\n    searchQuery: '',\n    highlightedIndex: 0,\n    isOpen: false,\n  });\n\n  const updateState = (newState: State) => {\n    setState(newState)\n  }\n\n  const clearSearch = () => {\n    updateState({...state, selected: null, searchQuery: '', highlightedIndex: 0, isOpen: true})\n    if (onSelect) {\n      onSelect(null);\n    }\n  }\n\n  const selectDatum = (value: Datum) => {\n    updateState({...state, selected: value, isOpen: false})\n    if (onSelect) {\n      onSelect(value);\n    }\n  }\n\n  useEffect(() => {\n    if (previousSelectedValue && !selectedValue) {\n      updateState({...state, selected: null, searchQuery: ''})\n    } else if (selectedValue) {\n      updateState({...state, selected: selectedValue})\n    }\n  }, [selectedValue, previousSelectedValue]);\n\n  const resultsRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const node = resultsRef.current;\n    if (node) {\n      const liElms = Array.from(node.querySelectorAll<HTMLButtonElement>('li .react-panel-search-list-item'));\n      for (let li of liElms) {\n        li.classList.remove('react-panel-search-highlighted-item')\n      }\n      if (liElms.length) {\n        let index: number;\n        if (state.highlightedIndex >= liElms.length) {\n          index = Math.abs(state.highlightedIndex - liElms.length)\n          updateState({...state, highlightedIndex: 0})\n        } else if (state.highlightedIndex < 0) {\n          index = liElms.length + state.highlightedIndex;\n          updateState({...state, highlightedIndex: liElms.length - 1})\n        } else {\n          index = state.highlightedIndex;\n        }\n        liElms[index].classList.add('react-panel-search-highlighted-item');\n        const highlightedTop = liElms[index].offsetTop;\n        const highlightedBottom = highlightedTop + liElms[index].offsetHeight;\n\n        const containerScrollTop = node.scrollTop;\n        const containerScrollBottom = containerScrollTop + node.offsetHeight;\n\n        if (highlightedBottom > containerScrollBottom) {\n          node.scrollTop = highlightedBottom - node.offsetHeight;\n        } else if (highlightedTop < liElms[index].offsetHeight) {\n          node.scrollTop = 0;\n        } else if (highlightedTop < containerScrollTop) {\n          node.scrollTop = highlightedTop;\n        }\n      }\n    }\n  }, [state]);\n\n\n  const onMouseLeave = () => {\n    if (onHover) {\n      onHover(null);\n    }\n  }\n\n  let listOutput: React.ReactElement<any>;\n\n  if (state.searchQuery.length) {\n    // Loop through each filtered level to make element list\n    // For each parent, find the children in the next level down if not the last level\n    // For each level, check if a parent exists, if so skip it\n    const filteredElms: React.ReactElement<any>[] = [];\n    const renderedIds: Array<string | number> = [];\n    const getChildren = (index: number, parent: Datum['parent_id']) => {\n      const elms: React.ReactElement<any>[] = [];\n      sortBy(levels[index].data, ['name']).forEach((child) => {\n        if (child.parent_id === parent &&\n            !renderedIds.includes(child.id) &&\n            child.title.toLowerCase().includes(state.searchQuery.toLowerCase())\n          ) {\n          renderedIds.push(child.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[index + 1] && levels[index + 1].data) {\n            childElms = getChildren(index + 1, child.id);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul>\n              {childElms}\n            </ul>\n          ) : null;\n          const onContinue = () => {\n            const targetIndex = levels.findIndex(({level}) => level === state.level);\n            updateState({\n              ...state, level: levels[targetIndex + 1].level, parent: child.id, \n              highlightedIndex: 0, selected: null, searchQuery: '',\n            })\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(child, Direction.desc);\n            }\n          }\n          const onSearch = () => {\n            selectDatum(child)\n          }\n          const onMouseEnter = () => {\n            if (onHover) {\n              onHover(child);\n            }\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(levels[index].level) ? (\n            <SearchButton\n              onClick={onContinue}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item traverse-only'}\n            >\n              {child.title}\n            </SearchButton>\n          ) : (\n            <SearchButton\n              onClick={onSearch}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item'}\n            >\n              {child.title}\n            </SearchButton>\n          )\n          elms.push(\n            <li\n              key={'search-' + child.title + child.id}\n            >\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n      return elms;\n    }\n    levels.forEach(({level, data}, i) => {\n      sortBy(data, ['name']).forEach((datum) => {\n        if (!renderedIds.includes(datum.id) && datum.title.toLowerCase().includes(state.searchQuery.toLowerCase())) {\n          renderedIds.push(datum.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[i + 1] && levels[i + 1].data) {\n            childElms = getChildren(i + 1, datum.id);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul>\n              {childElms}\n            </ul>\n          ) : null;\n          const onContinue = () => {\n            const targetIndex = levels.findIndex(({level}) => level === state.level);\n            updateState({\n              ...state, level: levels[targetIndex + 1].level, parent: datum.id, \n              highlightedIndex: 0, selected: null, searchQuery: '',\n            })\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(datum, Direction.desc);\n            }\n          }\n          const onSearch = () => {\n            selectDatum(datum)\n          }\n          const onMouseEnter = () => {\n            if (onHover) {\n              onHover(datum);\n            }\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(level) ? (\n            <SearchButton\n              onClick={onContinue}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item traverse-only'}\n            >\n              {datum.title}\n            </SearchButton>\n          ) : (\n            <SearchButton\n              onClick={onSearch}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item'}\n            >\n              {datum.title}\n            </SearchButton>\n          )\n          filteredElms.push(\n            <li key={'search-' + datum.title + datum.id}>\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n    });\n    listOutput = (\n      <ul>\n        {filteredElms}\n      </ul>\n    );\n  } else {\n    const targetIndex = levels.findIndex(({level}) => level === state.level);\n    const listItems = levels[targetIndex].data.filter(({parent_id}) => parent_id === state.parent).map(d => {\n      const onContinue = () => {\n        updateState({\n          ...state, level: levels[targetIndex + 1].level, parent: d.id, \n          highlightedIndex: 0,\n        })\n        if (onTraverseLevel !== undefined) {\n          onTraverseLevel(d, Direction.desc);\n        }\n      }\n      const onSearch = () => {\n        if (disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)) {\n          onContinue();\n        } else {\n          selectDatum(d)\n        }\n      }\n      const className = disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)\n        ? 'react-panel-search-list-item traverse-only'\n        : 'react-panel-search-list-item';\n      const continueButton = targetIndex !== levels.length - 1 ? (\n        <NextButton onClick={onContinue}>\n          {'>'}\n        </NextButton>\n      ) : null;\n\n      const onMouseEnter = () => {\n        if (onHover) {\n          onHover(d);\n        }\n      }\n      return (\n        <PanelItem key={d.id}>\n          <PanelButton\n            onClick={onSearch}\n            className={className}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n          >{d.title}</PanelButton> {continueButton}\n        </PanelItem>\n      );\n    });\n\n    const parentDatum = parent === null || targetIndex === 0\n      ? undefined : levels[targetIndex - 1].data.find(({id}) => id === state.parent);\n\n    const titleText = topLevelTitle ? <span>{topLevelTitle}</span> : null;\n\n    const breadCrumb = !parentDatum ? titleText : (\n      <React.Fragment>\n        <NavButton\n          onClick={() => {\n            updateState({\n              ...state,\n              level: levels[targetIndex - 1].level,\n              parent: parentDatum.parent_id,\n              highlightedIndex: 0,\n            });\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(parentDatum, Direction.asc);\n            }\n          }}\n        >\n          {'<'}\n        </NavButton>\n        <span>\n          {parentDatum.title}\n        </span>\n      </React.Fragment>\n    )\n    listOutput = (\n      <React.Fragment>\n        <Title>\n          {breadCrumb}\n        </Title>\n        <ul>\n            {listItems}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.which === 40 || e.keyCode === 40) {\n      updateState({...state, highlightedIndex: state.highlightedIndex + 1})\n    } else if (e.which === 38 || e.keyCode === 38) {\n      updateState({...state, highlightedIndex: state.highlightedIndex - 1})\n    } else if (e.which === 13 || e.keyCode === 13) { \n      const node = resultsRef.current;\n      if (node) {\n        const highlightedElm = node.querySelector<HTMLButtonElement>('li .react-panel-search-highlighted-item');\n        if (highlightedElm) {\n          highlightedElm.click();\n          if (!highlightedElm.classList.contains('traverse-only')) {\n            const focusedInput = document.activeElement as HTMLElement;\n            if (focusedInput) {\n              focusedInput.blur();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const backdrop  = state.isOpen ? (\n    <Backdrop\n      onClick={() => updateState({...state, highlightedIndex: 0, isOpen: false})}\n    />\n  ) : null;\n\n  const searchResults = state.isOpen ? (\n    <SearchResults ref={resultsRef}>\n      {listOutput}\n    </SearchResults>\n  ) : null;\n\n  return (\n    <Container\n      style={{zIndex: state.isOpen ? 2000 : undefined}}\n    >\n      {backdrop}\n      <SearchBar>\n        <StandardSearch\n          placeholder={state.selected ? state.selected.title : 'Search'}\n          setSearchQuery={val => updateState({\n            ...state,\n            searchQuery: val,\n            level: levels[0].level,\n            parent: null,\n            highlightedIndex: 0,\n          })}\n          initialQuery={''}\n          onClear={clearSearch}\n          hasSelection={state.selected ? true : false}\n          handleKeyDown={handleKeyDown}\n          onFocus={() => updateState({...state, isOpen: true})}\n        />\n      </SearchBar>\n      {searchResults}\n    </Container>\n  );\n}\n","import React from 'react'\nimport sortBy from 'lodash/sortBy';\nimport Root, {Direction} from './components/Root';\n\n// Singular datum\nexport interface Datum {\n  id: number | string;\n  title: string;\n  // levels can be either numbers or strings,\n  // order is based on value high-to low then\n  // alphabetical A-Z\n  level: number | string;\n  // all data points are expected to have the\n  // same hierarchy.\n  // i.e. grandparent -> parent -> child\n  // NOT  grandparent -> child\n  // when searching for an elements parent,\n  // it will traverse one level back up the\n  // level tree. Top level parent must have a\n  // parent_id of null\n  parent_id: number | string | null;\n}\n\n// Levels are groupings of all datum\n// within the same level hierarchy\nexport interface Level {\n  // each level is identified by it's unique\n  // level taken from the provided data\n  level: Datum['level'];\n  // each level contains a group of all the given\n  // data at that level\n  data: Datum[];\n}\n\ninterface Props {\n  data: Datum[];\n  topLevelTitle?: string;\n  onSelect?: (value: Datum | null) => void;\n  onHover?: (value: Datum | null) => void;\n  onTraverseLevel?: (value: Datum, direction: Direction) => void;\n  selectedValue?: Datum | null;\n  disallowSelectionLevels?: Level['level'][];\n}\n\nconst PanelSearch = (props: Props) => {\n  const {\n    data, onSelect, onHover, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel,\n  } = props;\n  const levels: Level[] = [];\n  sortBy(data, ({title}) => title.toLowerCase()).forEach(datum => {\n    let targetIndex = levels.findIndex(({level}) => level === datum.level);\n    if (targetIndex === -1) {\n      levels.push({\n        level: datum.level,\n        data: [datum],\n      })\n    } else {\n      levels[targetIndex].data.push(datum);\n    }\n  });\n  if (levels && levels.length) {\n    const sortedLevels = sortBy(levels, ['level']);\n    return (\n      <div>\n        <Root\n          levels={sortedLevels}\n          onSelect={onSelect}\n          onHover={onHover}\n          onTraverseLevel={onTraverseLevel}\n          selectedValue={selectedValue ? selectedValue : null}\n          topLevelTitle={topLevelTitle}\n          disallowSelectionLevels={disallowSelectionLevels}\n        />\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default PanelSearch;\n","import React, {useState} from 'react'\nimport PanelSearch, {Datum} from 'react-panel-search'\n\nimport raw from 'raw.macro';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 1.4rem;\n  font-weight: 400;\n  text-align: center;\n  color: #444;\n  display: flex;\n  align-items: center;\n  max-width: 400px;\n  margin-bottom: 3rem;\n`;\n\nconst ClearButton = styled.button`\n  padding: 0.4rem;\n  text-transform: uppercase;\n  background-color: #444;\n  border: none;\n  color: #fff;\n  text-align: center;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 0.8rem;\n  margin-left: 0.8rem;\n  cursor: pointer;\n`;\n\nconst SearchContainer = styled.div`\n  width: 400px;\n  max-width: 100%;\n`;\n\ninterface NaicsDatum {\n  naics_id: number;\n  naics_code: string;\n  title: string;\n  level: number;\n  parent_id: number | null;\n  parent_code: string | null;\n  code_hierarchy: string;\n  naics_id_hierarchy: string;\n}\n\nconst rawData: NaicsDatum[] = JSON.parse(raw('./naics_data.json'));\n\nconst App = () => {\n  const [selectedValue, setSelectedValue] = useState<Datum | null>(null);\n\n  const data: Datum[] = rawData.map(datum => {\n    return {\n      id: datum.naics_id,\n      title: datum.title,\n      level: datum.level,\n      parent_id: datum.parent_id,\n    }\n  })\n\n  const selectedText = selectedValue ? 'Selected: ' + selectedValue.title : 'Nothing selected';\n  const clearButton  = selectedValue\n    ? <ClearButton onClick={() => setSelectedValue(null)}>Clear</ClearButton>\n    : <ClearButton onClick={() => setSelectedValue(data[Math.floor(Math.random() * data.length)])}>Set value randomly</ClearButton>\n\n  return (\n    <Root>\n      <PageTitle>{selectedText} {clearButton}</PageTitle>\n      <SearchContainer>\n        <PanelSearch\n          data={data}\n          topLevelTitle={'All Industries'}\n          disallowSelectionLevels={[2]}\n          onSelect={setSelectedValue}\n          onHover={val => console.log(val)}\n          selectedValue={selectedValue}\n          onTraverseLevel={(data, direction) => console.log(data.id, direction)}\n        />\n      </SearchContainer>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}