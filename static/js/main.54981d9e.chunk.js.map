{"version":3,"sources":["../../src/components/StandardSearch.tsx","../../src/components/Root.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["SearchContainer","styled","SearchIcon","SearchBar","magnifyingGlassSize","DropDownIcon","ClearButton","StandardSearch","props","placeholder","setSearchQuery","initialQuery","type","onClear","hasSelection","handleKeyDown","onFocus","neverEmpty","focusOnRender","isOpen","setIsOpen","previousPlaceholder","usePrevious","searchEl","useRef","clearEl","dropdownEl","onChange","debounce","useEffect","node","className","dangerouslySetInnerHTML","__html","ref","autoComplete","onKeyDown","style","display","marginRight","undefined","onClick","transform","e","document","chevronSVG","Container","SearchResults","TitleOuter","BreadCrumbOuter","Title","NavButton","NextButton","TraverseOnlyButton","PanelItem","ButtonBase","NoResults","PanelButton","SearchButton","Direction","levels","onSelect","selectedValue","topLevelTitle","disallowSelectionLevels","onTraverseLevel","onHover","defaultPlaceholderText","showCount","resultsIdentation","maxResults","noResultsFoundFormatter","topLevelItems","matchingKeywordFormatter","onClose","initialSelectedValue","i","l","previousSelectedValue","useState","level","parent","selected","searchQuery","highlightedIndex","state","setState","updateState","newState","selectDatum","value","levelIndex","d","closeDropdown","current","rootRef","preventClickFromPropagating","el","resultsRef","closeOnEsc","focusedElement","liElms","Array","li","index","Math","highlightedTop","highlightedBottom","containerScrollTop","firstRender","onMouseLeave","safeQuery","RegExp","filteredElms","renderedIds","data","sortBy","datum","matchingKeywords","k","nonMatchingKeywords","keywordMatch","keywordResultElm","childList","childElms","getChildren","elms","child","depth","onMouseEnter","resultElm","targetIndex","paddingLeft","paddingRight","key","id","target","noResultsText","React","listOutput","listItems","onContinue","ArrowButton","continueButton","count","items","topLevelListItems","parentDatum","titleText","breadCrumb","searchResults","selectedClass","zIndex","val","newSelected","highlightedElm","focusedInput","sortedLevels","Root","div","PageTitle","h1","button","rawData","JSON","parse","App","setSelectedValue","map","keywords","push","title","naics_id","parent_id","selectedText","clearButton","floor","random","length","match","rest","query","replace","trim","join","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.54981d9e.chunk.js","sourcesContent":["import { debounce } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport {usePrevious} from 'react-use';\nimport raw from 'raw.macro';\n\nconst magnifyingGlassSVG = raw('../assets/magnifying-glass.svg');\nconst chevronSVG = raw('../assets/chevron.svg');\n\nconst SearchContainer = styled.label`\n  position: relative;\n  display: flex;\n`;\n\nconst magnifyingGlassSize = 1.5; // in rem\nconst magnifyingGlassSpacing = 0.5; // in rem\n\nconst SearchIcon = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto ${magnifyingGlassSpacing}rem;\n  width: ${magnifyingGlassSize}rem;\n  cursor: pointer;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: gray;\n    }\n  }\n`;\n\nconst SearchBar = styled.input<{$hasSelection: boolean}>`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0.5rem 0.5rem 0.5rem ${magnifyingGlassSize + (magnifyingGlassSpacing * 2)}rem;\n  box-sizing: border-box;\n  border: solid 1px #dfdfdf;\n  font-size: 1.2rem;\n  font-weight: 300;\n\n  ${({$hasSelection}) => $hasSelection ? (\n    `&::placeholder {\n      color: rgb(0, 0, 0);\n    }`\n  ) : ''}\n\n  &:focus {\n    &::placeholder {\n      color: rgb(255, 255, 255);\n    }\n  }\n`;\n\nconst DropDownIcon = styled.div`\n  position: absolute;\n  top: 3px;\n  bottom: 3px;\n  right: 2px;\n  padding: 0 0.4rem;\n  background-color: #fff;\n  border: none;\n  width: ${magnifyingGlassSize}rem;\n  cursor: pointer;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    polyline {\n      stroke: gray;\n      stroke-width: 0.6px;\n    }\n  }\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  top: 2px;\n  bottom: 2px;\n  right: 2px;\n  line-height: 0;\n  font-size: 1.2rem;\n  padding: 0.4rem;\n  text-transform: uppercase;\n  text-align: center;\n  color: #696969;\n  background-color: #fff;\n  border: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n\n  &:hover {\n    color: #908d8d;\n    cursor: pointer;\n  }\n`;\n\ninterface Props {\n  placeholder: string;\n  setSearchQuery: (value: string) => void;\n  initialQuery: string;\n  onClear: () => void;\n  hasSelection: boolean;\n  handleKeyDown: (event: React.KeyboardEvent) => void;\n  onFocus: () => void;\n  neverEmpty: boolean;\n  type?: string;\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n  focusOnRender: boolean;\n}\n\nconst StandardSearch = (props: Props) => {\n  const {\n    placeholder, setSearchQuery, initialQuery, type, onClear, hasSelection, handleKeyDown, onFocus,\n    neverEmpty, focusOnRender,\n    isOpen, setIsOpen,\n  } = props;\n\n  const previousPlaceholder = usePrevious(placeholder);\n\n  const searchEl = useRef<HTMLInputElement | null>(null);\n  const clearEl = useRef<HTMLButtonElement | null>(null);\n  const dropdownEl = useRef<HTMLDivElement | null>(null);\n\n  const onChange = debounce(() => {\n    if (searchEl !== null && searchEl.current !== null) {\n      setSearchQuery(searchEl.current.value);\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = !neverEmpty && (searchEl.current.value.length || hasSelection)\n          ? 'block'\n          : 'none';\n      }\n      if (dropdownEl && dropdownEl.current) {\n        dropdownEl.current.style.display = !neverEmpty && (searchEl.current.value.length || hasSelection)\n          ? 'none'\n          : 'block';\n      }\n    }\n  }, 400);\n\n  const clearSearch = () => {\n    if (searchEl !== null && searchEl.current !== null) {\n      searchEl.current.value = '';\n      searchEl.current.focus();\n      setSearchQuery(searchEl.current.value);\n      onClear();\n    }\n    if (clearEl && clearEl.current && !neverEmpty) {\n      clearEl.current.style.display = 'none';\n    }\n    if (dropdownEl && dropdownEl.current) {\n      dropdownEl.current.style.display = 'block';\n    }\n  };\n\n  useEffect(() => {\n    const node = searchEl.current;\n    if (node) {\n      if (!node.value) {\n        node.value = initialQuery;\n      }\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = !neverEmpty && (node.value.length || hasSelection) ? 'block' : 'none';\n      }\n      if (dropdownEl && dropdownEl.current) {\n        dropdownEl.current.style.display = !neverEmpty && (node.value.length || hasSelection) ? 'none' : 'block';\n      }\n      if (node.value && hasSelection && previousPlaceholder !== placeholder) {\n        node.value = '';\n      }\n    }\n  }, [searchEl, initialQuery, hasSelection, placeholder, previousPlaceholder]);\n\n  useEffect(() => {\n    if (focusOnRender && searchEl && searchEl.current) {\n      searchEl.current.focus();\n    }\n  }, [focusOnRender, searchEl])\n\n  const closeDropdown = (e: React.MouseEvent) => {\n    if (isOpen) {\n      e.preventDefault();\n      e.stopPropagation();\n      (document.activeElement as HTMLElement).blur();\n      setIsOpen(false)\n    }\n  }\n\n  return (\n    <SearchContainer\n      className={'react-panel-search-search-bar-container'}\n    >\n      <SearchIcon\n        className={'react-panel-search-search-bar-search-icon'}\n        dangerouslySetInnerHTML={{__html: magnifyingGlassSVG}}\n      />\n      <SearchBar\n        className={'react-panel-search-search-bar-input'}\n        ref={searchEl}\n        type={type ? type : 'text'}\n        placeholder={placeholder}\n        onChange={onChange}\n        autoComplete={'off'}\n        $hasSelection={hasSelection}\n        onKeyDown={handleKeyDown}\n        onFocus={onFocus}\n      />\n      <ClearButton\n        className={'react-panel-search-search-bar-clear-button'}\n        ref={clearEl}\n        style={{\n          display: 'none',\n          marginRight: type === 'number' ? '1rem' : undefined,\n        }}\n        onClick={clearSearch}\n      >\n        ×\n      </ClearButton>\n      <DropDownIcon\n        ref={dropdownEl}\n        className={'react-panel-search-search-bar-dropdown-arrow'}\n        style={{\n          display: 'block',\n          transform: isOpen ? 'rotate(180deg)' : undefined,\n        }}\n        dangerouslySetInnerHTML={{__html: chevronSVG}}\n        onClick={closeDropdown}\n      />\n    </SearchContainer>\n  );\n};\n\nexport default StandardSearch;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {Level, Datum} from '../'\nimport StandardSearch from './StandardSearch';\nimport sortBy from 'lodash/sortBy';\nimport {usePrevious} from 'react-use';\nimport styled from 'styled-components/macro';\nimport raw from 'raw.macro';\n\nconst chevronSVG = raw('../assets/chevron.svg');\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  color: #333;\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li {\n    li {\n      button:before {\n        content: '↳';\n        margin-right: 0.5rem;\n      }\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: #f3f3f3;\n  }\n\n  &.react-panel-search-has-selection {\n    input::placeholder {\n      opacity: 1;\n    }\n  }\n`;\n\nconst SearchBar = styled.div`\n  position: relative;\n`;\n\nconst SearchResults = styled.div`\n  position: absolute;\n  width: 100%;\n  box-sizing: border-box;\n  max-height: 300px;\n  overflow: auto;\n  background-color: #fff;\n\n  &:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: #fff;\n    }\n  }\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n`;\n\nconst TitleOuter = styled.div`\n  font-weight: 600;\n  padding: 0.25rem 1.75rem 0.6rem;\n  text-transform: uppercase;\n  color: #444;\n  font-size: 0.85rem;\n`;\n\nconst BreadCrumbOuter = styled(TitleOuter)`\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst Title = styled.div`\n  display: grid;\n  grid-column-gap: 0.5rem;\n  grid-template-columns: auto 1fr;\n  padding: 0.35rem 0;\n  border-bottom: solid 1px gray;\n`;\n\nconst NavButton = styled.button`\n  border: none;\n  outline: none;\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 1.4rem;\n  padding: 0.25rem;\n  background-color: transparent;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:focus {\n    background-color: #f3f3f3;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    transform: rotate(90deg);\n\n    polyline {\n      stroke: gray;\n      stroke-width: 0.75px;\n    }\n  }\n`;\n\nconst NextButton = styled(NavButton)`\n  grid-row: 1;\n  grid-column: 2;\n  position: relative;\n  padding: 0 0.25rem;\n  height: 1.5rem;\n  background-color: #fff;\n  margin: auto 1.75rem auto 0.75rem;\n\n  &:hover {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n\n  svg {\n    transform: rotate(-90deg);\n  }\n`;\n\nconst TraverseOnlyButton = styled(NextButton)`\n  background-color: transparent;\n  pointer-events: none;\n`;\n\nconst PanelItem = styled.li`\n  display: grid;\n  grid-template-columns: 1fr auto;\n`;\n\nconst ButtonBase = styled.button`\n  padding: 0.75rem 4rem 0.75rem 2rem;\n  font-size: 0.8rem;\n  background-color: #fff;\n  border: none;\n  outline: none;\n  display: block;\n  width: 100%;\n  text-align: left;\n  box-sizing: border-box;\n\n  &:hover, &:focus {\n    cursor: pointer;\n    background-color: #f3f3f3;\n  }\n`;\n\nconst NoResults = styled.div`\n  padding: 0.75rem 4rem 0.75rem 2rem;\n  font-size: 0.8rem;\n`;\n\nconst PanelButton = styled(ButtonBase)`\n  grid-row: 1;\n  grid-column: 1 / 3;\n`;\n\nconst SearchButton = styled(ButtonBase)`\n  padding: 0.6rem 0.75rem\n`;\n\nexport enum Direction {\n  asc = 'asc',\n  desc = 'desc',\n}\n\ninterface Props {\n  levels: Level[];\n  topLevelItems: Datum[];\n  onSelect: undefined | ((value: Datum | null) => void);\n  onTraverseLevel: undefined | ((value: Datum, direction: Direction) => void);\n  onHover: undefined | ((value: Datum | null) => void);\n  selectedValue: Datum | null;\n  topLevelTitle: string | undefined;\n  disallowSelectionLevels: undefined | (Level['level'][]);\n  defaultPlaceholderText: string;\n  showCount: boolean;\n  resultsIdentation: number;\n  neverEmpty: boolean;\n  maxResults: number | null;\n  focusOnRender: boolean;\n  noResultsFoundFormatter: undefined | ((value: string) => React.ReactNode);\n  matchingKeywordFormatter: undefined | ((matched: string[], rest: string[], query: string) => React.ReactNode);\n  onClose: () => void;\n}\n\ninterface State {\n  level: Datum['level'];\n  parent: Datum['parent_id'];\n  selected: Datum | null;\n  searchQuery: string;\n  highlightedIndex: number;\n  isOpen: boolean;\n}\n\nexport default (props: Props) => {\n  const {\n    levels, onSelect, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel, onHover, defaultPlaceholderText, showCount, resultsIdentation,\n    neverEmpty, maxResults, focusOnRender, noResultsFoundFormatter, topLevelItems,\n    matchingKeywordFormatter, onClose,\n  } = props;\n\n  let initialSelectedValue: Datum | null = selectedValue;\n  if (neverEmpty) {\n    if (levels.length && initialSelectedValue === null) {\n      let i = 0;\n      do {\n        if (!disallowSelectionLevels || (\n          !disallowSelectionLevels.find(l => l === levels[i].level))\n          && levels[i].data.length\n        ) {\n          initialSelectedValue = levels[i].data[0];\n          break;\n        }\n        i++;\n      }\n      while (i < levels.length)\n    }\n  }\n\n  const previousSelectedValue = usePrevious(selectedValue);\n\n  const [state, setState] = useState<State>({\n    level: levels[0].level,\n    parent: null,\n    selected: initialSelectedValue,\n    searchQuery: '',\n    highlightedIndex: 0,\n    isOpen: false,\n  });\n\n  const updateState = (newState: State) => {\n    setState(newState)\n  }\n\n  const clearSearch = () => {\n    const newSelected = neverEmpty ? state.selected : null;\n    updateState({\n      level: levels[0].level,\n      parent: null,\n      selected: newSelected,\n      searchQuery: '',\n      highlightedIndex: 0,\n      isOpen: true,\n    })\n    if (onSelect) {\n      onSelect(newSelected);\n    }\n  }\n\n  const selectDatum = (value: Datum) => {\n    updateState({...state, selected: value, isOpen: false, searchQuery: ''})\n    if (onSelect) {\n      onSelect(value);\n    }\n  }\n\n  useEffect(() => {\n    if (previousSelectedValue && !selectedValue && !neverEmpty) {\n      updateState({...state, selected: null, searchQuery: ''})\n    } else if (selectedValue) {\n      let level: string | number | null = state.level;\n      let parent : string | number | null = state.parent;\n      if (selectedValue.level !== null) {\n        const levelIndex = levels.findIndex(d => d.level === selectedValue.level);\n        if (levelIndex < levels.length - 1) {\n          level = levels[levelIndex + 1].level;\n          parent = selectedValue.id;\n        }\n      }\n      updateState({...state, selected: selectedValue, level, parent})\n    }\n  }, [selectedValue, previousSelectedValue]);\n\n  const closeDropdown = () => setState(current => ({...current, highlightedIndex: 0, isOpen: false}));\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let el: HTMLDivElement;\n    const preventClickFromPropagating = (e: MouseEvent) => {\n      if (state.isOpen) {\n        e.stopPropagation();\n      }\n    };\n    if (rootRef.current !== null) {\n      el = rootRef.current;\n      el.addEventListener('mousedown', preventClickFromPropagating);\n    }\n\n    document.addEventListener('mousedown', closeDropdown);\n    return () => {\n      document.removeEventListener('mousedown', closeDropdown);\n      if (el) {\n        el.removeEventListener('mousedown', preventClickFromPropagating);\n      }\n    };\n  }, [rootRef, closeDropdown]);\n\n  const resultsRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const closeOnEsc = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        closeDropdown();\n        const focusedElement = document.activeElement as HTMLElement;\n        if (focusedElement) {\n          focusedElement.blur();\n        }\n      }\n    }\n    const node = resultsRef.current;\n    if (node) {\n      const liElms = Array.from(node.querySelectorAll<HTMLButtonElement>('li .react-panel-search-list-item'));\n      for (let li of liElms) {\n        li.classList.remove('react-panel-search-highlighted-item')\n      }\n      if (liElms.length) {\n        let index: number;\n        if (state.highlightedIndex >= liElms.length) {\n          index = Math.abs(state.highlightedIndex - liElms.length)\n          updateState({...state, highlightedIndex: 0})\n        } else if (state.highlightedIndex < 0) {\n          index = liElms.length + state.highlightedIndex;\n          updateState({...state, highlightedIndex: liElms.length - 1})\n        } else {\n          index = state.highlightedIndex;\n        }\n        liElms[index].classList.add('react-panel-search-highlighted-item');\n        const highlightedTop = liElms[index].offsetTop;\n        const highlightedBottom = highlightedTop + liElms[index].offsetHeight;\n\n        const containerScrollTop = node.scrollTop;\n        const containerScrollBottom = containerScrollTop + node.offsetHeight;\n\n        if (highlightedBottom > containerScrollBottom) {\n          node.scrollTop = highlightedBottom - node.offsetHeight;\n        } else if (highlightedTop < liElms[index].offsetHeight) {\n          node.scrollTop = 0;\n        } else if (highlightedTop < containerScrollTop) {\n          node.scrollTop = highlightedTop;\n        }\n      }\n      document.addEventListener('keydown', closeOnEsc);\n    }\n    return () => {\n      document.removeEventListener('keydown', closeOnEsc);\n    }\n\n  }, [state, resultsRef, closeDropdown]);\n\n  const firstRender = useRef(true);\n  useEffect(() => {\n    if (firstRender.current) {\n     firstRender.current = false; \n    } else {\n      if (!state.isOpen) {\n        onClose();\n      }\n    }\n  }, [state.isOpen, onClose, firstRender])\n\n\n  const onMouseLeave = () => {\n    if (onHover) {\n      onHover(null);\n    }\n  }\n\n  let listOutput: React.ReactElement<any>;\n\n  if (state.searchQuery.length) {\n    const safeQuery = new RegExp(state.searchQuery.replace(/[^\\w\\s]/gi, '').trim(), 'gi');\n    // Loop through each filtered level to make element list\n    // For each parent, find the children in the next level down if not the last level\n    // For each level, check if a parent exists, if so skip it\n    const filteredElms: React.ReactElement<any>[] = [];\n    const renderedIds: Array<string | number> = [];\n    const getChildren = (index: number, parent: Datum['parent_id'], depth: number) => {\n      const elms: React.ReactElement<any>[] = [];\n      sortBy(levels[index].data, ['name']).forEach((child) => {\n        if (!maxResults || renderedIds.length < maxResults) {\n          let keywordMatch: boolean;\n          let keywordResultElm: React.ReactNode | null;\n          if (child.keywords && child.keywords.length) {\n            const matchingKeywords = child.keywords.filter(k => k.toLowerCase().includes(state.searchQuery.toLowerCase()));\n            const nonMatchingKeywords = child.keywords.filter(k => !k.toLowerCase().includes(state.searchQuery.toLowerCase()));\n            keywordMatch = matchingKeywords.length !== 0;\n            keywordResultElm = matchingKeywordFormatter\n              ? matchingKeywordFormatter(matchingKeywords, nonMatchingKeywords, state.searchQuery) : null;\n          } else {\n            keywordMatch = false;\n            keywordResultElm = null;\n          }\n          if (child.parent_id === parent &&\n              !renderedIds.includes(child.id) &&\n              (child.title.toLowerCase().includes(state.searchQuery.toLowerCase()) || keywordMatch)\n            ) {\n            renderedIds.push(child.id);\n            let childElms: React.ReactElement<any>[] | null;\n            if (levels[index + 1] && levels[index + 1].data) {\n              childElms = getChildren(index + 1, child.id, depth + 1);\n            } else {\n              childElms = null;\n            }\n            const childList = childElms && childElms.length ? (\n              <ul\n                className={'react-panel-search-list-inner-container'}\n              >\n                {childElms}\n              </ul>\n            ) : null;\n            const onContinue = () => {\n              const targetIndex = levels.findIndex(({level}) => level === child.level);\n              updateState({\n                ...state, level: levels[targetIndex + 1].level, parent: child.id, \n                highlightedIndex: 0, selected: null, searchQuery: '',\n              })\n              if (onTraverseLevel !== undefined) {\n                onTraverseLevel(child, Direction.desc);\n              }\n            }\n            const onSearch = () => {\n              selectDatum(child)\n            }\n            const onMouseEnter = () => {\n              if (onHover) {\n                onHover(child);\n              }\n            }\n            const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(levels[index].level) ? (\n              <SearchButton\n                onClick={onContinue}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                className={'react-panel-search-list-item traverse-only'}\n                style={{paddingLeft: (depth * resultsIdentation) + 'rem', paddingRight: resultsIdentation + 'rem'}}\n              >\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: child.title.replace(safeQuery, (match: string) => `<strong>${match}</strong>`),\n                  }}\n                />\n                {keywordResultElm}\n              </SearchButton>\n            ) : (\n              <SearchButton\n                onClick={onSearch}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                className={'react-panel-search-list-item'}\n                style={{paddingLeft: (depth * resultsIdentation) + 'rem', paddingRight: resultsIdentation + 'rem'}}\n              >\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: child.title.replace(safeQuery, (match: string) => `<strong>${match}</strong>`),\n                  }}\n                />\n                {keywordResultElm}\n              </SearchButton>\n            )\n            elms.push(\n              <li\n                className={'react-panel-search-list-item-container'}\n                key={'search-' + child.title + child.id}\n              >\n                {resultElm}\n                {childList}\n              </li>\n            );\n          }\n        }\n      });\n      return elms;\n    }\n    [...levels, {level: null, data: topLevelItems}].forEach(({level, data}, i) => {\n      sortBy(data, ['name']).forEach((datum) => {\n        let keywordMatch: boolean;\n        let keywordResultElm: React.ReactNode | null;\n        if (datum.keywords && datum.keywords.length) {\n          const matchingKeywords = datum.keywords.filter(k => k.toLowerCase().includes(state.searchQuery.toLowerCase()));\n          const nonMatchingKeywords = datum.keywords.filter(k => !k.toLowerCase().includes(state.searchQuery.toLowerCase()));\n          keywordMatch = matchingKeywords.length !== 0;\n          keywordResultElm = matchingKeywordFormatter\n            ? matchingKeywordFormatter(matchingKeywords, nonMatchingKeywords, state.searchQuery) : null;\n        } else {\n          keywordMatch = false;\n          keywordResultElm = null;\n        }\n        if (!renderedIds.includes(datum.id) &&\n            (datum.title.toLowerCase().includes(state.searchQuery.toLowerCase()) || keywordMatch) && (\n              !maxResults || renderedIds.length < maxResults\n            )) {\n          renderedIds.push(datum.id);\n          let childElms: React.ReactElement<any>[] | null;\n          if (levels[i + 1] && levels[i + 1].data) {\n            childElms = getChildren(i + 1, datum.id, 1);\n          } else {\n            childElms = null;\n          }\n          const childList = childElms && childElms.length ? (\n            <ul\n              className={'react-panel-search-list-inner-container'}\n            >\n              {childElms}\n            </ul>\n          ) : null;\n          const onContinue = () => {\n            const targetIndex = levels.findIndex(target => target.level === level);\n            updateState({\n              ...state, level: levels[targetIndex + 1].level, parent: datum.id, \n              highlightedIndex: 0, selected: null, searchQuery: '',\n            })\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(datum, Direction.desc);\n            }\n          }\n          const onSearch = () => {\n            selectDatum(datum)\n          }\n          const onMouseEnter = () => {\n            if (onHover) {\n              onHover(datum);\n            }\n          }\n          const resultElm = disallowSelectionLevels && disallowSelectionLevels.includes(level) ? (\n            <SearchButton\n              onClick={onContinue}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item traverse-only'}\n              style={{paddingLeft: resultsIdentation + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: datum.title.replace(safeQuery, (match: string) => `<strong>${match}</strong>`),\n                }}\n              />\n              {keywordResultElm}\n            </SearchButton>\n          ) : (\n            <SearchButton\n              onClick={onSearch}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              className={'react-panel-search-list-item'}\n              style={{paddingLeft: resultsIdentation + 'rem', paddingRight: resultsIdentation + 'rem'}}\n            >\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: datum.title.replace(safeQuery, (match: string) => `<strong>${match}</strong>`),\n                }}\n              />\n              {keywordResultElm}\n            </SearchButton>\n          )\n          filteredElms.push(\n            <li\n              className={'react-panel-search-list-item-container'}\n              key={'search-' + datum.title + datum.id}\n            >\n              {resultElm}\n              {childList}\n            </li>\n          );\n        }\n      });\n    });\n    if (filteredElms.length === 0) {\n      const noResultsText = noResultsFoundFormatter\n        ? noResultsFoundFormatter(state.searchQuery)\n        : `No results found for ${state.searchQuery}`;\n      filteredElms.push(\n        <li\n          className={'react-panel-search-list-item-container react-panel-search-list-no-results'}\n          key={'search-results-no-reasults-key'}\n        >\n          <NoResults>{noResultsText}</NoResults>\n        </li>\n      )\n    }\n    listOutput = (\n      <ul\n        className={'react-panel-search-list-root-container'}\n      >\n        {filteredElms}\n      </ul>\n    );\n  } else {\n    const targetIndex = levels.findIndex(({level}) => level === state.level);\n    const listItems = levels[targetIndex].data.filter(({parent_id}) => parent_id === state.parent).map(d => {\n      const onContinue = () => {\n        updateState({\n          ...state, level: levels[targetIndex + 1].level, parent: d.id, \n          highlightedIndex: 0,\n        })\n        if (onTraverseLevel !== undefined) {\n          onTraverseLevel(d, Direction.desc);\n        }\n      }\n      const onSearch = () => {\n        if (disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)) {\n          onContinue();\n        } else {\n          selectDatum(d)\n        }\n      }\n      const ArrowButton = disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)\n        ? TraverseOnlyButton\n        : NextButton;\n      const className = disallowSelectionLevels && disallowSelectionLevels.includes(levels[targetIndex].level)\n        ? 'react-panel-search-list-item traverse-only'\n        : 'react-panel-search-list-item';\n      const continueButton = targetIndex !== levels.length - 1 ? (\n        <ArrowButton\n          className={'react-panel-search-next-button'}\n          onClick={onContinue}\n          dangerouslySetInnerHTML={{__html: chevronSVG}}\n        />\n      ) : null;\n\n      const onMouseEnter = () => {\n        if (onHover) {\n          onHover(d);\n        }\n      }\n      const count = showCount && targetIndex !== levels.length - 1\n        ? `(${levels[targetIndex + 1].data.filter(({parent_id}) => parent_id === d.id).length})`\n        : null;\n      return (\n        <PanelItem\n          key={d.id}\n          className={'react-panel-search-panel-item-container'}\n        >\n          <PanelButton\n            onClick={onSearch}\n            className={className}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n          >{d.title} {count}</PanelButton> {continueButton}\n        </PanelItem>\n      );\n    });\n\n    let topLevelListItems: React.ReactElement | null;\n    if (topLevelItems.length && targetIndex === 0) {\n      const items = topLevelItems.map(d => {\n        const onMouseEnter = () => {\n          if (onHover) {\n            onHover(d);\n          }\n        }\n        return (\n          <PanelItem\n            key={d.id}\n            className={'react-panel-search-panel-item-container'}\n          >\n            <PanelButton\n              onClick={() => selectDatum(d)}\n              className={'react-panel-search-list-item'}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            >\n              {d.title}\n            </PanelButton>\n          </PanelItem>\n        );\n      });\n      topLevelListItems = items.length ? (\n        <ul\n          className={'react-panel-search-panel-list-top-items-container'}\n        >\n          {items}\n        </ul>\n      ) : null;\n    } else {\n      topLevelListItems = null;\n    }\n\n    const parentDatum = parent === null || targetIndex === 0\n      ? undefined : levels[targetIndex - 1].data.find(({id}) => id === state.parent);\n\n    const titleText = topLevelTitle ? <span>{topLevelTitle}</span> : null;\n\n    const breadCrumb = !parentDatum ? (\n      <TitleOuter\n        className={'react-panel-search-current-tier-static-title-outer'}\n      >\n        <Title\n          className={'react-panel-search-current-tier-title'}\n        >\n          {titleText}\n        </Title>\n      </TitleOuter>\n    ) : (\n      <BreadCrumbOuter\n        className={'react-panel-search-current-tier-breadcrumb-outer'}\n      >\n        <Title\n          className={'react-panel-search-current-tier-title'}\n          onClick={() => {\n            updateState({\n              ...state,\n              level: levels[targetIndex - 1].level,\n              parent: parentDatum.parent_id,\n              highlightedIndex: 0,\n            });\n            if (onTraverseLevel !== undefined) {\n              onTraverseLevel(parentDatum, Direction.asc);\n            }\n          }}\n        >\n          <NavButton\n            className={'react-panel-search-previous-button'}\n            dangerouslySetInnerHTML={{__html: chevronSVG}}\n          />\n          <span\n            className={'react-panel-search-current-tier-text'}\n          >\n            {parentDatum.title}\n          </span>\n        </Title>\n      </BreadCrumbOuter>\n    )\n    listOutput = (\n      <React.Fragment>\n        {topLevelListItems}\n        {breadCrumb}\n        <ul\n          className={'react-panel-search-panel-list-root-container' + (topLevelListItems\n            ? 'react-panel-search-panel-list-has-top-level-items' : '')}\n        >\n            {listItems}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.which === 40 || e.keyCode === 40) {\n      updateState({...state, highlightedIndex: state.highlightedIndex + 1})\n    } else if (e.which === 38 || e.keyCode === 38) {\n      updateState({...state, highlightedIndex: state.highlightedIndex - 1})\n    } else if (e.which === 13 || e.keyCode === 13) { \n      const node = resultsRef.current;\n      if (node) {\n        const highlightedElm = node.querySelector<HTMLButtonElement>('li .react-panel-search-highlighted-item');\n        if (highlightedElm) {\n          highlightedElm.click();\n          if (!highlightedElm.classList.contains('traverse-only')) {\n            const focusedInput = document.activeElement as HTMLElement;\n            if (focusedInput) {\n              focusedInput.blur();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const searchResults = state.isOpen ? (\n    <SearchResults\n      ref={resultsRef}\n      className={'react-panel-search-search-results'}\n    >\n      {listOutput}\n    </SearchResults>\n  ) : null;\n\n  const selectedClass = state.selected ? ' react-panel-search-has-selection' : '';\n\n  return (\n    <Container\n      ref={rootRef}\n      className={'react-panel-search-root-container' + selectedClass}\n      style={{zIndex: state.isOpen ? 2000 : undefined}}\n    >\n      <SearchBar\n        className={'react-panel-search-search-bar'}\n      >\n        <StandardSearch\n          placeholder={state.selected ? state.selected.title : defaultPlaceholderText}\n          setSearchQuery={val => updateState({\n            ...state,\n            searchQuery: val,\n            level: levels[0].level,\n            parent: null,\n            highlightedIndex: 0,\n          })}\n          initialQuery={''}\n          onClear={clearSearch}\n          hasSelection={state.selected ? true : false}\n          neverEmpty={neverEmpty}\n          handleKeyDown={handleKeyDown}\n          onFocus={() => updateState({...state, isOpen: true})}\n          isOpen={state.isOpen}\n          setIsOpen={(isOpen) => updateState({...state, isOpen})}\n          focusOnRender={focusOnRender}\n        />\n      </SearchBar>\n      {searchResults}\n    </Container>\n  );\n}\n","import React from 'react'\nimport sortBy from 'lodash/sortBy';\nimport Root, {Direction} from './components/Root';\n\n// Singular datum\nexport interface Datum {\n  id: number | string;\n  title: string;\n  // levels can be either numbers or strings,\n  // order is based on value high-to low then\n  // alphabetical A-Z\n  level: number | string | null;\n  // all data points are expected to have the\n  // same hierarchy.\n  // i.e. grandparent -> parent -> child\n  // NOT  grandparent -> child\n  // when searching for an elements parent,\n  // it will traverse one level back up the\n  // level tree. Top level parent must have a\n  // parent_id of null\n  parent_id: number | string | null;\n  // optional keywords will also be searched\n  keywords?: string[];\n}\n\n// Levels are groupings of all datum\n// within the same level hierarchy\nexport interface Level {\n  // each level is identified by it's unique\n  // level taken from the provided data\n  level: Datum['level'];\n  // each level contains a group of all the given\n  // data at that level\n  data: Datum[];\n}\n\ninterface Props {\n  data: Datum[];\n  topLevelTitle?: string;\n  onSelect?: (value: Datum | null) => void;\n  onHover?: (value: Datum | null) => void;\n  onTraverseLevel?: (value: Datum, direction: Direction) => void;\n  selectedValue?: Datum | null;\n  disallowSelectionLevels?: Level['level'][];\n  defaultPlaceholderText?: string;\n  showCount?: boolean;\n  resultsIdentation?: number;\n  neverEmpty?: boolean;\n  maxResults?: number;\n  focusOnRender?: boolean;\n  noResultsFoundFormatter?: (value: string) => string;\n  matchingKeywordFormatter?: (matched: string[], rest: string[], query: string) => React.ReactNode;\n  onClose?: () => void;\n}\n\nconst PanelSearch = (props: Props) => {\n  const {\n    data, onSelect, onHover, selectedValue, topLevelTitle, disallowSelectionLevels,\n    onTraverseLevel, defaultPlaceholderText, showCount, resultsIdentation, neverEmpty,\n    maxResults, focusOnRender, noResultsFoundFormatter, matchingKeywordFormatter, onClose,\n  } = props;\n  const topLevelItems: Datum[] = [];\n  const levels: Level[] = [];\n  sortBy(data, ({title}) => title.toLowerCase()).forEach(datum => {\n    if (datum.level !== null) {\n      let targetIndex = levels.findIndex(({level}) => level === datum.level);\n      if (targetIndex === -1) {\n        levels.push({\n          level: datum.level,\n          data: [datum],\n        })\n      } else {\n        levels[targetIndex].data.push(datum);\n      }\n    } else {\n      topLevelItems.push(datum)\n    }\n  });\n  if (levels && levels.length) {\n    const sortedLevels = sortBy(levels, ['level']);\n    return (\n      <Root\n        levels={sortedLevels}\n        topLevelItems={topLevelItems}\n        onSelect={onSelect}\n        onHover={onHover}\n        onTraverseLevel={onTraverseLevel}\n        selectedValue={selectedValue ? selectedValue : null}\n        topLevelTitle={topLevelTitle}\n        disallowSelectionLevels={disallowSelectionLevels}\n        defaultPlaceholderText={defaultPlaceholderText ? defaultPlaceholderText : 'Search'}\n        showCount={showCount ? showCount : false}\n        resultsIdentation={resultsIdentation !== undefined ? resultsIdentation : 1}\n        neverEmpty={neverEmpty ? neverEmpty : false}\n        maxResults={maxResults ? maxResults : null}\n        focusOnRender={focusOnRender ? focusOnRender : false}\n        noResultsFoundFormatter={noResultsFoundFormatter}\n        matchingKeywordFormatter={matchingKeywordFormatter}\n        onClose={onClose ? onClose : () => {}}\n      />\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default PanelSearch;\n","import React, {useState} from 'react';\nimport PanelSearch, {Datum} from 'react-panel-search';\n\nimport raw from 'raw.macro';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 1.4rem;\n  font-weight: 400;\n  text-align: center;\n  color: #444;\n  display: flex;\n  align-items: center;\n  max-width: 1000px;\n  margin-bottom: 3rem;\n`;\n\nconst ClearButton = styled.button`\n  padding: 0.4rem;\n  text-transform: uppercase;\n  background-color: #444;\n  border: none;\n  color: #fff;\n  text-align: center;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 0.8rem;\n  margin-left: 0.8rem;\n  cursor: pointer;\n`;\n\nconst SearchContainer = styled.div`\n  width: 1000px;\n  max-width: 100%;\n`;\n\ninterface NaicsDatum {\n  naics_id: number;\n  naics_code: string;\n  title: string;\n  level: number;\n  parent_id: number | null;\n  parent_code: string | null;\n  code_hierarchy: string;\n  naics_id_hierarchy: string;\n}\n\nconst rawData: NaicsDatum[] = JSON.parse(raw('./naics_data.json'));\n\nconst App = () => {\n  const [selectedValue, setSelectedValue] = useState<Datum | null>(null);\n\n  const data: Datum[] = rawData.map((datum, i) => {\n    const keywords: string[] = [];\n\n    if (i === 5) {\n      keywords.push('Apple', 'Orange', 'Banana', 'Mango', 'Pear', 'Tangerine', 'Asparagus', 'Potato')\n    }\n    if (i === 645) {\n      keywords.push('Ford', 'Mustang', 'Hyundai', 'Subaru', 'Honda', 'Toyota', 'BMW', 'Tesla')\n    }\n    if (i === 800) {\n      keywords.push('Evergreen', 'Maple')\n    }\n    if (i === 48) {\n      keywords.push(datum.title)\n    }\n\n    return {\n      id: datum.naics_id,\n      title: datum.title,\n      level: datum.level,\n      parent_id: datum.parent_id,\n      keywords,\n    }\n  })\n\n  data.push({\n    id: 'top-level-industries-id',\n    title: 'Top Level Industries',\n    level: null,\n    parent_id: null,\n  },{\n    id: 'nearby-industries-id',\n    title: 'Nearby Industries',\n    level: null,\n    parent_id: null,\n  },)\n\n  const selectedText = selectedValue ? 'Selected: ' + selectedValue.title : 'Nothing selected';\n  const clearButton  = selectedValue\n    ? <ClearButton onClick={() => setSelectedValue(null)}>Clear</ClearButton>\n    : <ClearButton onClick={() => setSelectedValue(data[Math.floor(Math.random() * data.length)])}>Set value randomly</ClearButton>\n\n  const matchingKeywordFormatter = (match: string[], rest: string[], query: string) => {\n    const safeQuery = new RegExp(query.replace(/[^\\w\\s]/gi, '').trim(), 'gi');\n    if (match.length || rest.length) {\n      const __html = `Includes ${[...match, ...rest].join(', ')}`.replace(safeQuery, (match: string) => `<strong>${match}</strong>`);\n      return <div><small dangerouslySetInnerHTML={{__html}} /></div>\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <Root>\n      <PageTitle>{selectedText} {clearButton}</PageTitle>\n      <SearchContainer>\n        <PanelSearch\n          data={data}\n          topLevelTitle={'All Industries'}\n          disallowSelectionLevels={[2]}\n          onSelect={setSelectedValue}\n          selectedValue={selectedValue}\n          showCount={true}\n          resultsIdentation={1.75}\n          maxResults={500}\n          matchingKeywordFormatter={matchingKeywordFormatter}\n        />\n      </SearchContainer>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}